// Generated by Haxe 4.2.0
(function ($hx_exports, $global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function ComicboxExtension_activate(context) {
	let container = new capsule_Container();
	container.useServiceProvider(new capsule_Mapping("comicbox.core.PluginModule").toProvider(capsule_Provider.ProvideFactory(function(c) {
		return new comicbox_core_PluginModule();
	})).getValue(container));
	container.useServiceProvider(new comicbox_ComicboxModule(new comicbox_ComicboxConfig(vscode_Uri.parse(context.extensionUri),null)));
	container.useServiceProvider(new capsule_Mapping("comicbox.diagnostic.DiagnosticModule").toProvider(capsule_Provider.ProvideFactory(function(c) {
		return new comicbox_diagnostic_DiagnosticModule();
	})).getValue(container));
	container.useServiceProvider(new capsule_Mapping("comicbox.definition.DefinitionModule").toProvider(capsule_Provider.ProvideFactory(function(c) {
		return new comicbox_definition_DefinitionModule();
	})).getValue(container));
	container.useServiceProvider(new capsule_Mapping("comicbox.document.DocumentModule").toProvider(capsule_Provider.ProvideFactory(function(c) {
		return new comicbox_document_DocumentModule();
	})).getValue(container));
	container.useServiceProvider(new capsule_Mapping("comicbox.preview.PreviewModule").toProvider(capsule_Provider.ProvideFactory(function(c) {
		return new comicbox_preview_PreviewModule();
	})).getValue(container));
	container.useServiceProvider(new capsule_Mapping("comicbox.render.RenderModule").toProvider(capsule_Provider.ProvideFactory(function(c) {
		return new comicbox_render_RenderModule();
	})).getValue(container));
	container.getMappingByIdentifier("comicbox.core.PluginManager").getValue(container).register(context);
}
$hx_exports["activate"] = ComicboxExtension_activate;
class HxOverrides {
	static cca(s,index) {
		let x = s.charCodeAt(index);
		if(x != x) {
			return undefined;
		}
		return x;
	}
	static substr(s,pos,len) {
		if(len == null) {
			len = s.length;
		} else if(len < 0) {
			if(pos == 0) {
				len = s.length + len;
			} else {
				return "";
			}
		}
		return s.substr(pos,len);
	}
	static remove(a,obj) {
		let i = a.indexOf(obj);
		if(i == -1) {
			return false;
		}
		a.splice(i,1);
		return true;
	}
	static now() {
		return Date.now();
	}
}
HxOverrides.__name__ = "HxOverrides";
class Lambda {
	static exists(it,f) {
		let x = $getIterator(it);
		while(x.hasNext()) if(f(x.next())) {
			return true;
		}
		return false;
	}
	static find(it,f) {
		let v = $getIterator(it);
		while(v.hasNext()) {
			let v1 = v.next();
			if(f(v1)) {
				return v1;
			}
		}
		return null;
	}
}
Lambda.__name__ = "Lambda";
Math.__name__ = "Math";
class Std {
	static string(s) {
		return js_Boot.__string_rec(s,"");
	}
	static parseInt(x) {
		if(x != null) {
			let _g = 0;
			let _g1 = x.length;
			while(_g < _g1) {
				let i = _g++;
				let c = x.charCodeAt(i);
				if(c <= 8 || c >= 14 && c != 32 && c != 45) {
					let nc = x.charCodeAt(i + 1);
					let v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
					if(isNaN(v)) {
						return null;
					} else {
						return v;
					}
				}
			}
		}
		return null;
	}
}
Std.__name__ = "Std";
class StringBuf {
	constructor() {
		this.b = "";
	}
}
StringBuf.__name__ = "StringBuf";
Object.assign(StringBuf.prototype, {
	__class__: StringBuf
});
class StringTools {
	static htmlEscape(s,quotes) {
		let buf_b = "";
		let _g_offset = 0;
		let _g_s = s;
		while(_g_offset < _g_s.length) {
			let s = _g_s;
			let index = _g_offset++;
			let c = s.charCodeAt(index);
			if(c >= 55296 && c <= 56319) {
				c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
			}
			let c1 = c;
			if(c1 >= 65536) {
				++_g_offset;
			}
			let code = c1;
			switch(code) {
			case 34:
				if(quotes) {
					buf_b += "&quot;";
				} else {
					buf_b += String.fromCodePoint(code);
				}
				break;
			case 38:
				buf_b += "&amp;";
				break;
			case 39:
				if(quotes) {
					buf_b += "&#039;";
				} else {
					buf_b += String.fromCodePoint(code);
				}
				break;
			case 60:
				buf_b += "&lt;";
				break;
			case 62:
				buf_b += "&gt;";
				break;
			default:
				buf_b += String.fromCodePoint(code);
			}
		}
		return buf_b;
	}
	static isSpace(s,pos) {
		let c = HxOverrides.cca(s,pos);
		if(!(c > 8 && c < 14)) {
			return c == 32;
		} else {
			return true;
		}
	}
	static ltrim(s) {
		let l = s.length;
		let r = 0;
		while(r < l && StringTools.isSpace(s,r)) ++r;
		if(r > 0) {
			return HxOverrides.substr(s,r,l - r);
		} else {
			return s;
		}
	}
	static rtrim(s) {
		let l = s.length;
		let r = 0;
		while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
		if(r > 0) {
			return HxOverrides.substr(s,0,l - r);
		} else {
			return s;
		}
	}
	static trim(s) {
		return StringTools.ltrim(StringTools.rtrim(s));
	}
}
StringTools.__name__ = "StringTools";
var Vscode = require("vscode");
class boxup_Compiler {
	constructor(reporter,generator,validator) {
		this.reporter = reporter;
		this.generator = generator;
		this.validator = validator;
	}
	compile(source) {
		let _gthis = this;
		let outcome = boxup_OutcomeTools.map(boxup_OutcomeTools.map(boxup_OutcomeTools.map(source.tokens,function(tokens) {
			return new boxup_Parser(tokens).parse();
		}),function(nodes) {
			if(_gthis.validator == null) {
				return boxup_Outcome.Ok(nodes);
			} else {
				return _gthis.validator.validate(nodes);
			}
		}),function(nodes) {
			return _gthis.generator.generate(nodes);
		});
		switch(outcome._hx_index) {
		case 0:
			return haxe_ds_Option.Some(outcome.data);
		case 1:
			this.reporter.report(outcome.error,source);
			return haxe_ds_Option.None;
		}
	}
}
boxup_Compiler.__name__ = "boxup.Compiler";
Object.assign(boxup_Compiler.prototype, {
	__class__: boxup_Compiler
});
class boxup_Error {
	constructor(message,pos) {
		this.message = message;
		this.pos = pos;
	}
	toString() {
		return "" + this.message + " : " + this.pos.file + " " + this.pos.min + " " + this.pos.max;
	}
}
boxup_Error.__name__ = "boxup.Error";
Object.assign(boxup_Error.prototype, {
	__class__: boxup_Error
});
var boxup_NodeType = $hxEnums["boxup.NodeType"] = { __ename__:true,__constructs__:null
	,Block: ($_=function(name) { return {_hx_index:0,name:name,__enum__:"boxup.NodeType",toString:$estr}; },$_._hx_name="Block",$_.__params__ = ["name"],$_)
	,Paragraph: {_hx_name:"Paragraph",_hx_index:1,__enum__:"boxup.NodeType",toString:$estr}
	,Text: {_hx_name:"Text",_hx_index:2,__enum__:"boxup.NodeType",toString:$estr}
};
boxup_NodeType.__constructs__ = [boxup_NodeType.Block,boxup_NodeType.Paragraph,boxup_NodeType.Text];
class boxup_Node {
	constructor(type,isTag,textContent,properties,children,pos) {
		this.textContent = null;
		this.isTag = false;
		this.type = type;
		if(isTag != null) {
			this.isTag = isTag;
		}
		if(textContent != null) {
			this.textContent = textContent;
		}
		this.properties = properties;
		this.children = children;
		this.pos = pos;
	}
	getProperty(name,def) {
		let prop = Lambda.find(this.properties,function(p) {
			return p.name == name;
		});
		if(prop == null) {
			return def;
		} else {
			return prop.value.value;
		}
	}
}
boxup_Node.__name__ = "boxup.Node";
Object.assign(boxup_Node.prototype, {
	__class__: boxup_Node
});
var boxup_Outcome = $hxEnums["boxup.Outcome"] = { __ename__:true,__constructs__:null
	,Ok: ($_=function(data) { return {_hx_index:0,data:data,__enum__:"boxup.Outcome",toString:$estr}; },$_._hx_name="Ok",$_.__params__ = ["data"],$_)
	,Fail: ($_=function(error) { return {_hx_index:1,error:error,__enum__:"boxup.Outcome",toString:$estr}; },$_._hx_name="Fail",$_.__params__ = ["error"],$_)
};
boxup_Outcome.__constructs__ = [boxup_Outcome.Ok,boxup_Outcome.Fail];
class boxup_OutcomeTools {
	static sure(outcome) {
		switch(outcome._hx_index) {
		case 0:
			return outcome.data;
		case 1:
			throw haxe_Exception.thrown(outcome.error);
		}
	}
	static map(outcome,transform) {
		switch(outcome._hx_index) {
		case 0:
			return transform(outcome.data);
		case 1:
			return boxup_Outcome.Fail(outcome.error);
		}
	}
}
boxup_OutcomeTools.__name__ = "boxup.OutcomeTools";
class boxup_Parser {
	constructor(tokens) {
		this.position = 0;
		this.tokens = tokens;
	}
	parse() {
		this.position = 0;
		try {
			let _g = [];
			while(!this.isAtEnd()) _g.push(this.parseRoot(0));
			let _g1 = [];
			let _g2 = 0;
			while(_g2 < _g.length) {
				let v = _g[_g2];
				++_g2;
				if(v != null) {
					_g1.push(v);
				}
			}
			return boxup_Outcome.Ok(_g1);
		} catch( _g ) {
			let _g1 = haxe_Exception.caught(_g);
			let _g2 = _g1.unwrap();
			if(((_g2) instanceof boxup_Error)) {
				return boxup_Outcome.Fail([_g2]);
			} else {
				return boxup_Outcome.Fail([new boxup_Error(_g1.details(),{ min : 0, max : 0, file : this.tokens.length != 0 ? this.tokens[0].pos.file : "<unknown>"})]);
			}
		}
	}
	parseRoot(indent) {
		if(indent == null) {
			indent = 0;
		}
		if(this.isAtEnd()) {
			return null;
		}
		if(this.match("<newline>")) {
			return this.parseRoot(0);
		}
		if(this.match("<whitespace>")) {
			return this.parseRoot(indent + 1);
		}
		if(this.match("[/")) {
			this.ignoreComment();
			return this.parseRoot(indent);
		}
		if(this.match("[")) {
			return this.parseBlock(indent);
		}
		return this.parseParagraph(indent);
	}
	parseRootInline(indent) {
		if(this.isAtEnd() || this.isNewline(this.peek())) {
			return null;
		}
		this.ignoreWhitespace();
		if(this.match("[/")) {
			this.ignoreComment();
			return this.parseRootInline(indent);
		}
		if(this.match("[")) {
			return this.parseBlock(indent);
		}
		return this.parseParagraph(indent);
	}
	parseBlock(indent,isTag) {
		if(isTag == null) {
			isTag = false;
		}
		this.ignoreWhitespace();
		let properties = [];
		let children = [];
		let blockName;
		let _g = this.symbol();
		if(_g == null) {
			let name = this.blockIdentifier();
			if(this.match(".")) {
				let value = this.parseValue(true);
				if(value == null) {
					throw haxe_Exception.thrown(this.error("Expected an ID",this.peek().pos));
				}
				properties.push({ name : "id", value : value, pos : value.pos});
			}
			blockName = name;
		} else {
			let value = this.parseValue(true);
			if(value != null) {
				properties.push({ name : "id", value : value, pos : value.pos});
			}
			blockName = _g;
		}
		this.ignoreWhitespace();
		if(!this.check("]")) {
			while(true) {
				this.ignoreWhitespaceAndNewline();
				if(this.check("]")) {
					break;
				}
				properties.push(this.parseProperty(true));
				if(!(!this.isAtEnd() && !this.check("]") && (this.isWhitespace(this.peek()) || this.isNewline(this.peek())))) {
					break;
				}
			}
		}
		this.consume("]");
		this.ignoreWhitespace();
		let childIndent = 0;
		if(!isTag) {
			this.ignoreWhitespace();
			if(!this.isNewline(this.peek())) {
				children.push(this.parseRootInline(indent));
			} else if(this.isPropertyBlock(indent)) {
				while(true) {
					let prev = this.position;
					let tmp;
					let tmp1;
					if(!this.isAtEnd()) {
						childIndent = this.findIndent();
						tmp1 = childIndent > indent;
					} else {
						tmp1 = false;
					}
					if(tmp1) {
						tmp = true;
					} else {
						this.position = prev;
						tmp = false;
					}
					if(!tmp) {
						break;
					}
					properties.push(this.parseProperty(false));
				}
			} else {
				while(true) {
					let prev = this.position;
					let tmp;
					let tmp1;
					if(!this.isAtEnd()) {
						childIndent = this.findIndent();
						tmp1 = childIndent > indent;
					} else {
						tmp1 = false;
					}
					if(tmp1) {
						tmp = true;
					} else {
						this.position = prev;
						tmp = false;
					}
					if(!tmp) {
						break;
					}
					let _g = this.parseRoot(childIndent);
					if(_g != null) {
						children.push(_g);
					}
				}
			}
		}
		return new boxup_Node(boxup_NodeType.Block(blockName.value),isTag,null,properties,children,blockName.pos);
	}
	isPropertyBlock(indent) {
		let start = this.position;
		if(this.findIndent() > indent && this.identifier() != null) {
			this.ignoreWhitespace();
			if(this.check("=")) {
				this.position = start;
				return true;
			}
		}
		this.position = start;
		return false;
	}
	parseProperty(isInBlockDecl) {
		if(isInBlockDecl == null) {
			isInBlockDecl = true;
		}
		let name = this.identifier();
		if(name == null) {
			throw haxe_Exception.thrown(this.error("Expected an identifier",this.peek().pos));
		}
		this.ignoreWhitespace();
		this.consume("=");
		this.ignoreWhitespace();
		let value = this.parseValue(isInBlockDecl);
		if(value == null) {
			throw haxe_Exception.thrown(this.error("Expected a value",this.peek().pos));
		}
		return { name : name.value, value : value, pos : name.pos};
	}
	parseValue(isInBlockDecl) {
		let _gthis = this;
		let tok = this.match("'") ? this.parseString("'") : this.match("\"") ? this.parseString("\"") : isInBlockDecl ? boxup_TokenTools.merge(this.readWhile(function() {
			return _gthis.check("<text>");
		})) : boxup_TokenTools.merge(this.readWhile(function() {
			return !_gthis.isNewline(_gthis.peek());
		}));
		if(tok == null) {
			return null;
		}
		return { type : this.getType(tok.value), value : tok.value, pos : tok.pos};
	}
	parseParagraph(indent) {
		let start = this.peek();
		let children = [];
		while(true) {
			if(this.match("<")) {
				children.push(this.parseTaggedBlock());
			} else if(this.match("/")) {
				children.push(this.parseDecoration("@italic","/"));
			} else if(this.match("*")) {
				children.push(this.parseDecoration("@bold","*"));
			} else if(this.match("`")) {
				children.push(this.parseDecoration("@raw","`"));
			} else if(this.match("_")) {
				children.push(this.parseDecoration("@underlined","_"));
			} else {
				children.push(this.parseTextPart(indent));
			}
			if(!(!this.isAtEnd() && !this.isNewline(this.peek()))) {
				break;
			}
		}
		let _g = boxup_NodeType.Paragraph;
		let _g1 = [];
		let _g2 = 0;
		while(_g2 < children.length) {
			let v = children[_g2];
			++_g2;
			if(v != null) {
				_g1.push(v);
			}
		}
		return new boxup_Node(_g,null,null,[],_g1,boxup_TokenTools.getMergedPos(start,this.previous()));
	}
	parseDecoration(name,delimiter) {
		let _gthis = this;
		let tok = boxup_TokenTools.merge(this.readWhile(function() {
			return !_gthis.check(delimiter);
		}));
		this.consume(delimiter);
		return new boxup_Node(boxup_NodeType.Block(name),null,null,[],[new boxup_Node(boxup_NodeType.Text,null,tok.value,[],[],tok.pos)],tok.pos);
	}
	parseTaggedBlock() {
		let _gthis = this;
		let tagged = boxup_TokenTools.merge(this.readWhile(function() {
			return !_gthis.check(">");
		}));
		this.consume(">");
		this.consume("[");
		let block = this.parseBlock(0,true);
		block.children.push(new boxup_Node(boxup_NodeType.Text,null,tagged.value,[],[],tagged.pos));
		return block;
	}
	parseTextPart(indent) {
		let _gthis = this;
		let read = function() {
			return boxup_TokenTools.merge(_gthis.readWhile(function() {
				return !_gthis.checkAny(["<","*","/","_","`","<newline>"]);
			}));
		};
		let out = [read()];
		let readNext = null;
		readNext = function() {
			while(true) {
				if(!_gthis.isAtEnd()) {
					let pre = _gthis.position;
					if(_gthis.isNewline(_gthis.peek())) {
						_gthis.advance();
						if(_gthis.findIndentWithoutNewline() >= indent) {
							if(_gthis.isBlockStart()) {
								_gthis.position = pre;
							} else {
								let part = read();
								if(part == null || part.value.length == 0) {
									_gthis.position = pre;
								} else {
									out.push({ type : part.type, value : " " + StringTools.trim(part.value), pos : part.pos});
									continue;
								}
							}
						} else {
							_gthis.position = pre;
						}
					} else {
						_gthis.position = pre;
					}
				}
				return;
			}
		};
		readNext();
		let tok = boxup_TokenTools.merge(out);
		return new boxup_Node(boxup_NodeType.Text,null,tok.value,[],[],tok.pos);
	}
	ignoreComment() {
		let _gthis = this;
		this.readWhile(function() {
			return !_gthis.check("/]");
		});
		if(!this.isAtEnd()) {
			this.consume("/]");
		}
	}
	parseString(delimiter) {
		let _gthis = this;
		let out = boxup_TokenTools.merge(this.readWhile(function() {
			return !_gthis.check(delimiter);
		}));
		if(this.isAtEnd()) {
			throw haxe_Exception.thrown(this.error("Unterminated string",out.pos));
		}
		this.consume(delimiter);
		return out;
	}
	isBlockStart() {
		return this.check("[");
	}
	symbol() {
		switch(this.peek().type) {
		case "!":case "#":case "$":case "%":case "&":case "*":case "+":case "-":case ":":case "<":case ">":case "?":case "@":case "^":
			return this.advance();
		default:
			return null;
		}
	}
	blockIdentifier() {
		if(!this.checkTokenValueStarts(this.peek(),$bind(this,this.isUcAlpha))) {
			throw haxe_Exception.thrown(this.error("Expected an uppercase identifier",this.peek().pos));
		}
		return this.identifier();
	}
	identifier() {
		let _gthis = this;
		return boxup_TokenTools.merge(this.readWhile(function() {
			return _gthis.checkTokenValue(_gthis.peek(),$bind(_gthis,_gthis.isAlphaNumeric));
		}));
	}
	getType(c) {
		let _gthis = this;
		if(c == "true" || c == "false") {
			return "Bool";
		}
		let isFloat = function() {
			let _g = 0;
			let _g1 = c.length;
			while(_g < _g1) {
				let i = _g++;
				if(!_gthis.isDigit(c.charAt(i)) || c.charAt(i) != ".") {
					return false;
				}
			}
			return true;
		};
		if((function() {
			let _g = 0;
			let _g1 = c.length;
			while(_g < _g1) if(!_gthis.isDigit(c.charAt(_g++))) {
				return false;
			}
			return true;
		})()) {
			return "Int";
		} else if(isFloat()) {
			return "Float";
		} else {
			return "String";
		}
	}
	findIndentWithoutNewline() {
		let found = 0;
		while(!this.isAtEnd() && this.isWhitespace(this.peek())) {
			this.advance();
			++found;
		}
		return found;
	}
	findIndent() {
		let found = this.findIndentWithoutNewline();
		if(!this.isAtEnd() && this.isNewline(this.peek())) {
			this.advance();
			return this.findIndent();
		}
		return found;
	}
	ignoreWhitespace() {
		let _gthis = this;
		this.readWhile(function() {
			return _gthis.isWhitespace(_gthis.peek());
		});
	}
	ignoreWhitespaceAndNewline() {
		let _gthis = this;
		this.readWhile(function() {
			if(!_gthis.isWhitespace(_gthis.peek())) {
				return _gthis.isNewline(_gthis.peek());
			} else {
				return true;
			}
		});
	}
	isNewline(token) {
		return token.type == "<newline>";
	}
	isWhitespace(token) {
		return token.type == "<whitespace>";
	}
	isDigit(c) {
		if(c >= "0") {
			return c <= "9";
		} else {
			return false;
		}
	}
	isUcAlpha(c) {
		if(c >= "A") {
			return c <= "Z";
		} else {
			return false;
		}
	}
	isAlpha(c) {
		if(!(c >= "a" && c <= "z" || c >= "A" && c <= "Z")) {
			return c == "_";
		} else {
			return true;
		}
	}
	isAlphaNumeric(c) {
		if(!this.isAlpha(c)) {
			return this.isDigit(c);
		} else {
			return true;
		}
	}
	checkTokenValueStarts(token,comp) {
		if(token.value.length == 0) {
			return false;
		}
		return comp(token.value.charAt(0));
	}
	checkTokenValue(token,comp) {
		if(token.value.length == 0) {
			return false;
		}
		let _g = 0;
		let _g1 = token.value.length;
		while(_g < _g1) if(!comp(token.value.charAt(_g++))) {
			return false;
		}
		return true;
	}
	readWhile(compare) {
		let _g = [];
		while(!this.isAtEnd() && compare()) _g.push(this.advance());
		return _g;
	}
	consume(type) {
		if(!this.match(type)) {
			throw haxe_Exception.thrown(this.error("Expected a " + type,this.peek().pos));
		}
	}
	match(type) {
		if(this.check(type)) {
			this.advance();
			return true;
		}
		return false;
	}
	check(type) {
		return this.peek().type == type;
	}
	checkAny(types) {
		let _g = 0;
		while(_g < types.length) if(this.check(types[_g++])) {
			return true;
		}
		return false;
	}
	peek() {
		return this.tokens[this.position];
	}
	previous() {
		return this.tokens[this.position - 1];
	}
	advance() {
		if(!this.isAtEnd()) {
			this.position++;
		}
		return this.previous();
	}
	isAtEnd() {
		if(this.position < this.tokens.length) {
			return this.peek().type == "<eof>";
		} else {
			return true;
		}
	}
	error(msg,pos) {
		return new boxup_Error(msg,pos);
	}
}
boxup_Parser.__name__ = "boxup.Parser";
Object.assign(boxup_Parser.prototype, {
	__class__: boxup_Parser
});
class boxup_Scanner {
	constructor(source) {
		this.start = 0;
		this.position = 0;
		this.source = source;
	}
	scan() {
		this.position = 0;
		this.start = 0;
		try {
			let _g = [];
			while(!this.isAtEnd()) _g.push(this.scanToken());
			_g.push({ type : "<eof>", value : "", pos : { min : this.position, max : this.position, file : this.source.filename}});
			return boxup_Outcome.Ok(_g);
		} catch( _g ) {
			let _g1 = haxe_Exception.caught(_g);
			let _g2 = _g1.unwrap();
			if(((_g2) instanceof boxup_Error)) {
				return boxup_Outcome.Fail([_g2]);
			} else {
				return boxup_Outcome.Fail([this.error(_g1.details(),0,0)]);
			}
		}
	}
	scanToken() {
		this.start = this.position;
		let r = this.advance();
		let _gthis = this;
		switch(r) {
		case "\n":
			return this.createToken("<newline>");
		case "\r":
			if(this.match("\n")) {
				return this.createToken("<newline>","\r\n");
			} else {
				return { type : "<text>", value : r + this.readWhile(function() {
					return _gthis.isAlphaNumeric(_gthis.peek());
				}), pos : { min : this.start, max : this.position, file : this.source.filename}};
			}
			break;
		case " ":
			return this.createToken("<whitespace>");
		case "!":
			return this.createToken("!");
		case "\"":
			return this.createToken("\"");
		case "#":
			return this.createToken("#");
		case "$":
			return this.createToken("$");
		case "%":
			return this.createToken("%");
		case "&":
			return this.createToken("&");
		case "'":
			return this.createToken("'");
		case "*":
			return this.createToken("*");
		case "+":
			return this.createToken("+");
		case "-":
			return this.createToken("-");
		case ".":
			return this.createToken(".");
		case "/":
			if(this.match("]")) {
				return this.createToken("/]","/]");
			} else {
				return this.createToken("/");
			}
			break;
		case ":":
			return this.createToken(":");
		case "<":
			return this.createToken("<");
		case "=":
			return this.createToken("=");
		case ">":
			return this.createToken(">");
		case "?":
			return this.createToken("?");
		case "@":
			return this.createToken("@");
		case "[":
			if(this.match("/")) {
				return this.createToken("[/","/]");
			} else {
				return this.createToken("[");
			}
			break;
		case "\\":
			return this.createToken("<text>",this.advance());
		case "]":
			return this.createToken("]");
		case "^":
			return this.createToken("^");
		case "_":
			return this.createToken("_");
		case "`":
			return this.createToken("`");
		default:
			return { type : "<text>", value : r + this.readWhile(function() {
				return _gthis.isAlphaNumeric(_gthis.peek());
			}), pos : { min : this.start, max : this.position, file : this.source.filename}};
		}
	}
	createToken(type,value) {
		return { type : type, value : value == null ? this.previous() : value, pos : { file : this.source.filename, min : this.start, max : this.position}};
	}
	match(value) {
		if(this.check(value)) {
			this.position += value.length;
			return true;
		}
		return false;
	}
	check(value) {
		return HxOverrides.substr(this.source.content,this.position,value.length) == value;
	}
	peek() {
		return this.source.content.charAt(this.position);
	}
	advance() {
		if(!this.isAtEnd()) {
			this.position++;
		}
		return this.previous();
	}
	previous() {
		return this.source.content.charAt(this.position - 1);
	}
	isDigit(c) {
		if(c >= "0") {
			return c <= "9";
		} else {
			return false;
		}
	}
	isAlpha(c) {
		if(!(c >= "a" && c <= "z" || c >= "A" && c <= "Z")) {
			return c == "_";
		} else {
			return true;
		}
	}
	isAlphaNumeric(c) {
		if(!this.isAlpha(c)) {
			return this.isDigit(c);
		} else {
			return true;
		}
	}
	readWhile(compare) {
		let _g = [];
		while(!this.isAtEnd() && compare()) _g.push(this.advance());
		return _g.join("");
	}
	isAtEnd() {
		return this.position >= this.source.content.length;
	}
	error(msg,min,max) {
		return new boxup_Error(msg,{ min : min, max : max, file : this.source.filename});
	}
}
boxup_Scanner.__name__ = "boxup.Scanner";
Object.assign(boxup_Scanner.prototype, {
	__class__: boxup_Scanner
});
class boxup_Source {
	constructor(filename,content) {
		this.filename = filename;
		this.content = content;
		this.tokens = new boxup_Scanner(this).scan();
	}
	getLine(lineNumber) {
		if(lineNumber == 1) {
			return this.getLineAt(0);
		}
		let line = 1;
		let index = 0;
		let tok = null;
		let toks = boxup_OutcomeTools.sure(this.tokens);
		let end = toks.length - 1;
		let min = null;
		let max = null;
		while(index <= end) {
			let check = toks[index];
			++index;
			if(check.type == "<newline>") {
				++line;
				tok = check;
				min = check.pos.max;
				max = check.pos.max;
				if(line == lineNumber) {
					break;
				}
			}
		}
		if(tok != null) {
			while(index <= end) {
				let tok = toks[index];
				++index;
				if(tok.type == "<newline>") {
					max = tok.pos.min;
					break;
				}
			}
		}
		if(tok == null) {
			return null;
		} else {
			return { line : line, newlinePos : tok.pos, pos : { min : min, max : max, file : this.filename}};
		}
	}
	getLineAt(at) {
		let index = 0;
		let toks = boxup_OutcomeTools.sure(this.tokens);
		let end = toks.length - 1;
		let line = 1;
		let tok = null;
		let min = null;
		let max = null;
		while(index <= end) {
			let check = toks[index];
			++index;
			if(check.type == "<newline>") {
				++line;
				tok = check;
				min = check.pos.max;
				max = check.pos.max;
			}
			if(check.pos.min >= at) {
				break;
			}
		}
		if(tok == null) {
			tok = toks[0];
			++index;
			min = 0;
			max = 0;
		}
		if(tok != null) {
			while(index <= end) {
				let tok = toks[index];
				++index;
				if(tok.type == "<newline>") {
					max = tok.pos.min;
					break;
				}
			}
		}
		if(tok == null) {
			return null;
		} else {
			return { line : line, newlinePos : tok.pos, pos : { min : min, max : max, file : this.filename}};
		}
	}
	getPosRelativeToNewline(pos) {
		let line = this.getLineAt(pos.min);
		if(line.line == 1) {
			return pos;
		}
		return { min : pos.min - line.newlinePos.max, max : pos.max - line.newlinePos.max, file : this.filename};
	}
}
boxup_Source.__name__ = "boxup.Source";
Object.assign(boxup_Source.prototype, {
	__class__: boxup_Source
});
class boxup_TokenTools {
	static merge(tokens) {
		let _g = [];
		let _g1 = 0;
		let _g2 = tokens;
		while(_g1 < _g2.length) {
			let v = _g2[_g1];
			++_g1;
			if(v != null) {
				_g.push(v);
			}
		}
		tokens = _g;
		if(_g.length == 0) {
			return null;
		}
		if(_g.length == 1) {
			return _g[0];
		}
		let result = new Array(_g.length);
		let _g3 = 0;
		let _g4 = _g.length;
		while(_g3 < _g4) {
			let i = _g3++;
			result[i] = _g[i].value;
		}
		return { type : "<text>", value : result.join(""), pos : boxup_TokenTools.getMergedPos(_g[0],_g[_g.length - 1])};
	}
	static getMergedPos(a,b) {
		return { min : a.pos.min, max : b.pos.max, file : a.pos.file};
	}
}
boxup_TokenTools.__name__ = "boxup.TokenTools";
class boxup_cli_DefaultReporter {
	constructor() {
	}
	report(errors,source) {
		let _g = 0;
		let _g1 = errors;
		while(_g < _g1.length) this.reportError(_g1[_g++],source);
	}
	reportError(e,source) {
		let pos = e.pos;
		if(pos.min == 0 && pos.max == 0) {
			let v = "ERROR: " + pos.file + ":1 [" + pos.min + " " + pos.max + "]";
			process.stdout.write(Std.string(v));
			process.stdout.write("\n");
			process.stdout.write("");
			process.stdout.write("\n");
			let v1 = e.message;
			process.stdout.write(Std.string(v1));
			process.stdout.write("\n");
			process.stdout.write("");
			process.stdout.write("\n");
			return;
		}
		let len = pos.max - pos.min;
		let line = source.getLineAt(pos.min);
		let relativePos = source.getPosRelativeToNewline(pos);
		let v = "ERROR: " + pos.file + ":" + line.line + " [" + pos.min + " " + pos.max + "]";
		process.stdout.write(Std.string(v));
		process.stdout.write("\n");
		process.stdout.write("");
		process.stdout.write("\n");
		let v1 = e.message;
		process.stdout.write(Std.string(v1));
		process.stdout.write("\n");
		process.stdout.write("");
		process.stdout.write("\n");
		if(line.line > 1) {
			this.printLine(source,line.line - 1);
		}
		this.printLine(source,line.line);
		let v2 = this.repeat(3) + "| " + this.repeat(relativePos.min) + this.repeat(len,"^");
		process.stdout.write(Std.string(v2));
		process.stdout.write("\n");
		this.printLine(source,line.line + 1);
		process.stdout.write("");
		process.stdout.write("\n");
	}
	printLine(source,number) {
		let line = source.getLine(number);
		if(line != null) {
			let content = source.content.substring(line.pos.min,line.pos.max);
			let v = this.formatNumber(line.line) + content;
			process.stdout.write(Std.string(v));
			process.stdout.write("\n");
		}
	}
	formatNumber(lineNumber) {
		let num = lineNumber == null ? "null" : "" + lineNumber;
		let _g = [];
		let _g1 = 0;
		let _g2 = 3 - num.length - 1;
		while(_g1 < _g2) {
			++_g1;
			_g.push(" ");
		}
		return _g.join("") + ("" + num + " | ");
	}
	repeat(len,value) {
		if(value == null) {
			value = " ";
		}
		let _g = [];
		let _g1 = 0;
		while(_g1 < len) {
			++_g1;
			_g.push(value);
		}
		return _g.join("");
	}
}
boxup_cli_DefaultReporter.__name__ = "boxup.cli.DefaultReporter";
Object.assign(boxup_cli_DefaultReporter.prototype, {
	__class__: boxup_cli_DefaultReporter
});
class boxup_cli_Definition {
	constructor(blocks) {
		this.blocks = blocks;
	}
	getBlock(name) {
		return Lambda.find(this.blocks,function(b) {
			return b.name == name;
		});
	}
	validate(nodes) {
		let first = nodes[0];
		return boxup_OutcomeTools.map(this.getBlock("@root").validate(new boxup_Node(boxup_NodeType.Block("@root"),null,null,[],nodes,{ min : 0, max : 0, file : first.pos.file}),this),function(_) {
			return boxup_Outcome.Ok(nodes);
		});
	}
}
boxup_cli_Definition.__name__ = "boxup.cli.Definition";
Object.assign(boxup_cli_Definition.prototype, {
	__class__: boxup_cli_Definition
});
class boxup_cli_BlockDefinition {
	constructor(name,renderHint,kind,children,properties) {
		this.kind = "Normal";
		this.renderHint = "Section";
		this.name = name;
		if(renderHint != null) {
			this.renderHint = renderHint;
		}
		if(kind != null) {
			this.kind = kind;
		}
		this.children = children;
		this.properties = properties;
	}
	get_isParagraph() {
		return this.kind == "Paragraph";
	}
	get_isTag() {
		return this.kind == "Tag";
	}
	validate(node,definition) {
		let _gthis = this;
		let errors = [];
		let existingChildren = [];
		switch(this.kind) {
		case "Normal":case "Tag":
			try {
				this.validateProps(node);
			} catch( _g ) {
				let _g1 = haxe_Exception.caught(_g).unwrap();
				if(((_g1) instanceof boxup_Error)) {
					errors.push(_g1);
				} else {
					throw _g;
				}
			}
			break;
		case "Paragraph":
			if(node.properties.length > 0) {
				errors.push(new boxup_Error("Properties are not allowed in paragraph blocks",node.properties[0].pos));
			}
			break;
		default:
		}
		let validateChild = function(name,child) {
			if(Lambda.exists(_gthis.children,function(c) {
				return c.symbol == name;
			})) {
				let def = Lambda.find(_gthis.children,function(c) {
					return c.symbol == name;
				});
				name = def.name;
				child.type = boxup_NodeType.Block(def.name);
			}
			if(!Lambda.exists(_gthis.children,function(c) {
				return c.name == name;
			})) {
				errors.push(new boxup_Error("The block " + name + " is an invalid child for " + _gthis.name,child.pos));
			}
			let childDef = Lambda.find(_gthis.children,function(c) {
				return c.name == name;
			});
			let block = definition.getBlock(name);
			if(childDef == null) {
				errors.push(new boxup_Error("Child not allowed: " + name,child.pos));
			} else if(block == null) {
				errors.push(new boxup_Error("Unknown block type: " + name,child.pos));
			} else if(existingChildren.includes(name) && childDef.multiple == false) {
				errors.push(new boxup_Error("Only one " + name + " block is allowed for " + _gthis.name,child.pos));
			} else {
				existingChildren.push(name);
				let _g = block.validate(child,definition);
				if(_g._hx_index == 1) {
					errors = errors.concat(_g.error);
				}
			}
		};
		let _g = 0;
		let _g1 = node.children;
		while(_g < _g1.length) {
			let child = _g1[_g];
			++_g;
			let _g2 = child.type;
			switch(_g2._hx_index) {
			case 0:
				validateChild(_g2.name,child);
				break;
			case 1:
				let para = null;
				let _g3 = 0;
				let _g4 = this.children;
				while(_g3 < _g4.length) {
					let b = definition.getBlock(_g4[_g3++].name);
					if(b.get_isParagraph()) {
						para = b;
					}
				}
				if(para == null) {
					errors.push(new boxup_Error("No Paragraphs are allowed here",child.pos));
				} else {
					validateChild(para.name,child);
				}
				break;
			case 2:
				if(!this.get_isTag() && !this.get_isParagraph()) {
					errors.push(new boxup_Error("Invalid child",child.pos));
				}
				break;
			}
		}
		let _g2 = 0;
		let _g3 = this.children;
		while(_g2 < _g3.length) {
			let child = _g3[_g2];
			++_g2;
			if(child.required && !existingChildren.includes(child.name)) {
				errors.push(new boxup_Error("Requires a " + child.name + " block",node.pos));
			}
		}
		if(errors.length > 0) {
			return boxup_Outcome.Fail(errors);
		} else {
			return boxup_Outcome.Ok(node);
		}
	}
	validateProps(node) {
		let found = [];
		let checkForDuplicates = function(prop) {
			if(found.includes(prop.name)) {
				throw haxe_Exception.thrown(new boxup_Error("Duplicate property",prop.pos));
			}
			found.push(prop.name);
		};
		let _g = 0;
		let _g1 = node.properties;
		while(_g < _g1.length) {
			let prop = _g1[_g];
			++_g;
			let def = Lambda.find(this.properties,function(p) {
				return p.name == prop.name;
			});
			if(def == null) {
				let tmp;
				if(prop.name == "id") {
					def = Lambda.find(this.properties,function(p) {
						return p.isId;
					});
					tmp = def != null;
				} else {
					tmp = false;
				}
				if(tmp) {
					prop.name = def.name;
				} else {
					throw haxe_Exception.thrown(new boxup_Error("Invalid property: " + prop.name,prop.pos));
				}
			}
			checkForDuplicates(prop);
			if(prop.value.type != def.type) {
				throw haxe_Exception.thrown(new boxup_Error("Should be a " + def.type + " but was a " + prop.value.type,prop.value.pos));
			}
			if(def.allowedValues.length > 0 && !def.allowedValues.includes(prop.value.value)) {
				throw haxe_Exception.thrown(new boxup_Error("Value must be one of: " + def.allowedValues.join(", "),prop.value.pos));
			}
		}
		let _g2 = 0;
		let _g3 = this.properties;
		while(_g2 < _g3.length) {
			let def = _g3[_g2];
			++_g2;
			if(def.required && !found.includes(def.name)) {
				throw haxe_Exception.thrown(new boxup_Error("Requires property " + def.name,node.pos));
			}
		}
	}
}
boxup_cli_BlockDefinition.__name__ = "boxup.cli.BlockDefinition";
Object.assign(boxup_cli_BlockDefinition.prototype, {
	__class__: boxup_cli_BlockDefinition
});
class boxup_cli_ChildDefinition {
	constructor(name,symbol,required,multiple) {
		this.multiple = true;
		this.required = false;
		this.symbol = null;
		this.name = name;
		if(symbol != null) {
			this.symbol = symbol;
		}
		if(required != null) {
			this.required = required;
		}
		if(multiple != null) {
			this.multiple = multiple;
		}
	}
}
boxup_cli_ChildDefinition.__name__ = "boxup.cli.ChildDefinition";
Object.assign(boxup_cli_ChildDefinition.prototype, {
	__class__: boxup_cli_ChildDefinition
});
class boxup_cli_PropertyDefinition {
	constructor(name,isId,required,type,allowedValues) {
		this.allowedValues = [];
		this.type = "String";
		this.required = false;
		this.isId = false;
		this.name = name;
		if(isId != null) {
			this.isId = isId;
		}
		if(required != null) {
			this.required = required;
		}
		if(type != null) {
			this.type = type;
		}
		if(allowedValues != null) {
			this.allowedValues = allowedValues;
		}
	}
}
boxup_cli_PropertyDefinition.__name__ = "boxup.cli.PropertyDefinition";
Object.assign(boxup_cli_PropertyDefinition.prototype, {
	__class__: boxup_cli_PropertyDefinition
});
class boxup_cli_DefinitionCompiler {
	constructor(loader,reporter) {
		this.loader = loader;
		this.reporter = reporter;
		this.compiler = new boxup_Compiler(reporter,new boxup_cli_DefinitionGenerator(),boxup_cli_DefinitionValidator_validator);
	}
	load(path) {
		let _g = this.loader.load(path);
		switch(_g._hx_index) {
		case 0:
			return this.compiler.compile(_g.v);
		case 1:
			this.reporter.report([new boxup_Error("File not found: " + path,{ min : 0, max : 0, file : path})],new boxup_Source(path,""));
			return haxe_ds_Option.None;
		}
	}
}
boxup_cli_DefinitionCompiler.__name__ = "boxup.cli.DefinitionCompiler";
Object.assign(boxup_cli_DefinitionCompiler.prototype, {
	__class__: boxup_cli_DefinitionCompiler
});
class boxup_cli_DefinitionGenerator {
	constructor() {
	}
	generate(nodes) {
		let blocks = [].concat(boxup_cli_DefinitionGenerator.defaultBlocks);
		let _g = 0;
		while(_g < nodes.length) {
			let node = nodes[_g];
			++_g;
			let _g1 = node.type;
			if(_g1._hx_index == 0) {
				switch(_g1.name) {
				case "Block":
					let kind = node.getProperty("kind","Normal");
					let hint = Lambda.find(node.children,function(n) {
						let _g = n.type;
						if(_g._hx_index == 0) {
							if(_g.name == "RenderHint") {
								return true;
							} else {
								return false;
							}
						} else {
							return false;
						}
					});
					let _g2 = node.getProperty("name");
					let _g3 = kind;
					let _g4 = hint != null ? hint.getProperty("hint") : "Section";
					let _g5;
					if(kind == null) {
						let _this = node.children;
						let _g = [];
						let _g1 = 0;
						while(_g1 < _this.length) {
							let v = _this[_g1];
							++_g1;
							let _g2 = v.type;
							if(_g2._hx_index == 0 && _g2.name == "Child") {
								_g.push(v);
							}
						}
						let result = new Array(_g.length);
						let _g2 = 0;
						let _g3 = _g.length;
						while(_g2 < _g3) {
							let i = _g2++;
							let n = _g[i];
							result[i] = new boxup_cli_ChildDefinition(n.getProperty("name"),n.getProperty("symbol"),n.getProperty("required","false") == "true",n.getProperty("multiple","true") == "true");
						}
						_g5 = result;
					} else if(kind == "Paragraph") {
						let _this = node.children;
						let _g = [];
						let _g1 = 0;
						while(_g1 < _this.length) {
							let v = _this[_g1];
							++_g1;
							let _g2 = v.type;
							if(_g2._hx_index == 0 && _g2.name == "Child") {
								_g.push(v);
							}
						}
						let result = new Array(_g.length);
						let _g2 = 0;
						let _g3 = _g.length;
						while(_g2 < _g3) {
							let i = _g2++;
							let n = _g[i];
							result[i] = new boxup_cli_ChildDefinition(n.getProperty("name"),n.getProperty("symbol"),n.getProperty("required","false") == "true",n.getProperty("multiple","true") == "true");
						}
						_g5 = boxup_cli_DefinitionGenerator.defaultParagraphChildren.concat(result);
					} else {
						let _this = node.children;
						let _g = [];
						let _g1 = 0;
						while(_g1 < _this.length) {
							let v = _this[_g1];
							++_g1;
							let _g2 = v.type;
							if(_g2._hx_index == 0 && _g2.name == "Child") {
								_g.push(v);
							}
						}
						let result = new Array(_g.length);
						let _g2 = 0;
						let _g3 = _g.length;
						while(_g2 < _g3) {
							let i = _g2++;
							let n = _g[i];
							result[i] = new boxup_cli_ChildDefinition(n.getProperty("name"),n.getProperty("symbol"),n.getProperty("required","false") == "true",n.getProperty("multiple","true") == "true");
						}
						_g5 = result;
					}
					let _this = node.children;
					let _g6 = [];
					let _g7 = 0;
					while(_g7 < _this.length) {
						let v = _this[_g7];
						++_g7;
						let tmp;
						let _g = v.type;
						if(_g._hx_index == 0) {
							switch(_g.name) {
							case "EnumProperty":case "IdProperty":case "Property":
								tmp = true;
								break;
							default:
								tmp = false;
							}
						} else {
							tmp = false;
						}
						if(tmp) {
							_g6.push(v);
						}
					}
					let result = new Array(_g6.length);
					let _g8 = 0;
					let _g9 = _g6.length;
					while(_g8 < _g9) {
						let i = _g8++;
						let n = _g6[i];
						let _g = n.getProperty("name");
						let _g1 = n.getProperty("required") == "true";
						let _g2 = n.type;
						let _g3 = _g2._hx_index == 0 && _g2.name == "IdProperty";
						let _g4 = n.getProperty("type") != null ? n.getProperty("type") : "String";
						let _g5 = n.type;
						let tmp;
						if(_g5._hx_index == 0) {
							if(_g5.name == "EnumProperty") {
								let _this = n.children;
								let _g = [];
								let _g1 = 0;
								while(_g1 < _this.length) {
									let v = _this[_g1];
									++_g1;
									let _g2 = v.type;
									if(_g2._hx_index == 0 && _g2.name == "Option") {
										_g.push(v);
									}
								}
								let result = new Array(_g.length);
								let _g2 = 0;
								let _g3 = _g.length;
								while(_g2 < _g3) {
									let i = _g2++;
									result[i] = _g[i].getProperty("value");
								}
								tmp = result;
							} else {
								tmp = [];
							}
						} else {
							tmp = [];
						}
						result[i] = new boxup_cli_PropertyDefinition(_g,_g3,_g1,_g4,tmp);
					}
					blocks.push(new boxup_cli_BlockDefinition(_g2,_g4,_g3,_g5,result));
					break;
				case "Root":
					let _this1 = node.children;
					let _g10 = [];
					let _g11 = 0;
					while(_g11 < _this1.length) {
						let v = _this1[_g11];
						++_g11;
						let _g = v.type;
						if(_g._hx_index == 0 && _g.name == "Child") {
							_g10.push(v);
						}
					}
					let result1 = new Array(_g10.length);
					let _g12 = 0;
					let _g13 = _g10.length;
					while(_g12 < _g13) {
						let i = _g12++;
						let n = _g10[i];
						result1[i] = new boxup_cli_ChildDefinition(n.getProperty("name"),n.getProperty("symbol"),n.getProperty("required","false") == "true",n.getProperty("multiple","true") == "true");
					}
					blocks.push(new boxup_cli_BlockDefinition("@root",null,null,result1,[]));
					break;
				default:
				}
			}
		}
		return boxup_Outcome.Ok(new boxup_cli_Definition(blocks));
	}
}
boxup_cli_DefinitionGenerator.__name__ = "boxup.cli.DefinitionGenerator";
Object.assign(boxup_cli_DefinitionGenerator.prototype, {
	__class__: boxup_cli_DefinitionGenerator
});
class boxup_cli_ResourceLoader {
	constructor() {
	}
	load(name) {
		let _g = haxe_Resource.getString(name);
		if(_g == null) {
			return haxe_ds_Option.None;
		} else {
			return haxe_ds_Option.Some(new boxup_Source("<resource:" + name + ">",_g));
		}
	}
}
boxup_cli_ResourceLoader.__name__ = "boxup.cli.ResourceLoader";
Object.assign(boxup_cli_ResourceLoader.prototype, {
	__class__: boxup_cli_ResourceLoader
});
class capsule_Container {
	constructor(parent,mappings) {
		this.parent = parent;
		this.mappings = mappings != null ? mappings : new haxe_ds_StringMap();
		let c = js_Boot.getClass(this);
		let type = c.__name__;
		let tag = null;
		this.addMapping(new capsule_Mapping(tag == null ? type : "" + type + "#" + tag,capsule_Provider.ProvideValue(this)));
	}
	extend(container) {
		return new capsule_Container(container,this.mappings);
	}
	useServiceProvider(service) {
		service.register(this);
	}
	addMapping(mapping) {
		if(Object.prototype.hasOwnProperty.call(this.mappings.h,mapping.identifier)) {
			return this.getMappingByIdentifier(mapping.identifier);
		}
		this.mappings.h[mapping.identifier] = mapping;
		return mapping;
	}
	getMappingByIdentifier(id) {
		let m = this.mappings.h[id];
		if(m == null) {
			if(this.parent != null) {
				return this.parent.getMappingByIdentifier(id);
			}
			throw new capsule_MappingNotFoundException(id);
		}
		return m;
	}
	getValueByIdentifier(id) {
		return this.getMappingByIdentifier(id).getValue(this);
	}
}
capsule_Container.__name__ = "capsule.Container";
Object.assign(capsule_Container.prototype, {
	__class__: capsule_Container
});
class capsule_Mapping {
	constructor(identifier,provider) {
		this.identifier = identifier;
		this.provider = provider == null ? capsule_Provider.ProvideNone : provider;
	}
	with(cb) {
		if(this.closure == null) {
			this.closure = new capsule_Container();
		}
		cb(this.closure);
		return this;
	}
	toValue(value) {
		this.toProvider(capsule_Provider.ProvideValue(value));
		return this;
	}
	toProvider(provider) {
		this.checkProvider();
		this.provider = provider;
		return this;
	}
	asShared() {
		let _g = this.provider;
		switch(_g._hx_index) {
		case 0:
			throw new capsule_ProviderDoesNotExistException(this.identifier,"You cannot share a mapping that does not have a provider.");
		case 1:
			break;
		case 2:
			this.provider = capsule_Provider.ProvideShared(_g.factory);
			break;
		case 3:
			break;
		case 4:
			let id = _g.id;
			this.provider = capsule_Provider.ProvideShared(function(c) {
				return c.getValueByIdentifier(id);
			});
			break;
		}
		return this;
	}
	getValue(container) {
		let _g = this.provider;
		switch(_g._hx_index) {
		case 0:
			return null;
		case 1:
			return _g.value;
		case 2:
			return _g.factory(this.handleLocalMappings(container));
		case 3:
			let value = _g.factory(this.handleLocalMappings(container));
			this.provider = capsule_Provider.ProvideValue(value);
			return value;
		case 4:
			return this.handleLocalMappings(container).getValueByIdentifier(_g.id);
		}
	}
	handleLocalMappings(container) {
		if(this.closure != null) {
			return this.closure.extend(container);
		}
		return container;
	}
	extend(ext) {
		let _g = this.provider;
		switch(_g._hx_index) {
		case 0:
			throw new capsule_ProviderDoesNotExistException(this.identifier,"You cannot extend a mapping that does not have a provider");
		case 1:
			this.provider = capsule_Provider.ProvideValue(ext(_g.value));
			break;
		case 2:
			let factory = _g.factory;
			this.provider = capsule_Provider.ProvideFactory(function(c) {
				return ext(factory(c));
			});
			break;
		case 3:
			let factory1 = _g.factory;
			this.provider = capsule_Provider.ProvideShared(function(c) {
				return ext(factory1(c));
			});
			break;
		case 4:
			let id = _g.id;
			this.provider = capsule_Provider.ProvideFactory(function(c) {
				return ext(c.getValueByIdentifier(id));
			});
			break;
		}
		return this;
	}
	checkProvider() {
		if(this.provider != capsule_Provider.ProvideNone) {
			throw new capsule_ProviderAlreadyExistsException(this.identifier);
		}
	}
}
capsule_Mapping.__name__ = "capsule.Mapping";
Object.assign(capsule_Mapping.prototype, {
	__class__: capsule_Mapping
});
class haxe_Exception extends Error {
	constructor(message,previous,native) {
		super(message);
		this.message = message;
		this.__previousException = previous;
		this.__nativeException = native != null ? native : this;
		this.__skipStack = 0;
		let old = Error.prepareStackTrace;
		Error.prepareStackTrace = function(e) { return e.stack; }
		if(((native) instanceof Error)) {
			this.stack = native.stack;
		} else {
			let e = null;
			if(Error.captureStackTrace) {
				Error.captureStackTrace(this,haxe_Exception);
				e = this;
			} else {
				e = new Error();
				if(typeof(e.stack) == "undefined") {
					try { throw e; } catch(_) {}
					this.__skipStack++;
				}
			}
			this.stack = e.stack;
		}
		Error.prepareStackTrace = old;
	}
	unwrap() {
		return this.__nativeException;
	}
	toString() {
		return this.get_message();
	}
	details() {
		if(this.get_previous() == null) {
			let tmp = "Exception: " + this.toString();
			let tmp1 = this.get_stack();
			return tmp + (tmp1 == null ? "null" : haxe_CallStack.toString(tmp1));
		} else {
			let result = "";
			let e = this;
			let prev = null;
			while(e != null) {
				if(prev == null) {
					let result1 = "Exception: " + e.get_message();
					let tmp = e.get_stack();
					result = result1 + (tmp == null ? "null" : haxe_CallStack.toString(tmp)) + result;
				} else {
					let prevStack = haxe_CallStack.subtract(e.get_stack(),prev.get_stack());
					result = "Exception: " + e.get_message() + (prevStack == null ? "null" : haxe_CallStack.toString(prevStack)) + "\n\nNext " + result;
				}
				prev = e;
				e = e.get_previous();
			}
			return result;
		}
	}
	__shiftStack() {
		this.__skipStack++;
	}
	get_message() {
		return this.message;
	}
	get_previous() {
		return this.__previousException;
	}
	get_native() {
		return this.__nativeException;
	}
	get_stack() {
		let _g = this.__exceptionStack;
		if(_g == null) {
			let value = haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.normalize(this.stack),this.__skipStack);
			this.setProperty("__exceptionStack",value);
			return value;
		} else {
			return _g;
		}
	}
	setProperty(name,value) {
		try {
			Object.defineProperty(this,name,{ value : value});
		} catch( _g ) {
			this[name] = value;
		}
	}
	static caught(value) {
		if(((value) instanceof haxe_Exception)) {
			return value;
		} else if(((value) instanceof Error)) {
			return new haxe_Exception(value.message,null,value);
		} else {
			return new haxe_ValueException(value,null,value);
		}
	}
	static thrown(value) {
		if(((value) instanceof haxe_Exception)) {
			return value.get_native();
		} else if(((value) instanceof Error)) {
			return value;
		} else {
			let e = new haxe_ValueException(value);
			e.__skipStack++;
			return e;
		}
	}
}
haxe_Exception.__name__ = "haxe.Exception";
Object.assign(haxe_Exception.prototype, {
	__class__: haxe_Exception
});
class capsule_MappingNotFoundException extends haxe_Exception {
	constructor(id) {
		super("Mapping not found: " + id);
		this.__skipStack++;
	}
}
capsule_MappingNotFoundException.__name__ = "capsule.MappingNotFoundException";
Object.assign(capsule_MappingNotFoundException.prototype, {
	__class__: capsule_MappingNotFoundException
});
var capsule_Provider = $hxEnums["capsule.Provider"] = { __ename__:true,__constructs__:null
	,ProvideNone: {_hx_name:"ProvideNone",_hx_index:0,__enum__:"capsule.Provider",toString:$estr}
	,ProvideValue: ($_=function(value) { return {_hx_index:1,value:value,__enum__:"capsule.Provider",toString:$estr}; },$_._hx_name="ProvideValue",$_.__params__ = ["value"],$_)
	,ProvideFactory: ($_=function(factory) { return {_hx_index:2,factory:factory,__enum__:"capsule.Provider",toString:$estr}; },$_._hx_name="ProvideFactory",$_.__params__ = ["factory"],$_)
	,ProvideShared: ($_=function(factory) { return {_hx_index:3,factory:factory,__enum__:"capsule.Provider",toString:$estr}; },$_._hx_name="ProvideShared",$_.__params__ = ["factory"],$_)
	,ProvideAlias: ($_=function(id) { return {_hx_index:4,id:id,__enum__:"capsule.Provider",toString:$estr}; },$_._hx_name="ProvideAlias",$_.__params__ = ["id"],$_)
};
capsule_Provider.__constructs__ = [capsule_Provider.ProvideNone,capsule_Provider.ProvideValue,capsule_Provider.ProvideFactory,capsule_Provider.ProvideShared,capsule_Provider.ProvideAlias];
class capsule_ProviderAlreadyExistsException extends haxe_Exception {
	constructor(id,previous) {
		super("A provider already exists for this mapping: " + id,previous);
		this.__skipStack++;
	}
}
capsule_ProviderAlreadyExistsException.__name__ = "capsule.ProviderAlreadyExistsException";
Object.assign(capsule_ProviderAlreadyExistsException.prototype, {
	__class__: capsule_ProviderAlreadyExistsException
});
class capsule_ProviderDoesNotExistException extends haxe_Exception {
	constructor(id,reason,previous) {
		let message = "No provider exists for this mapping: " + id;
		if(reason != null) {
			message += " " + reason;
		}
		super(message,previous);
		this.__skipStack++;
	}
}
capsule_ProviderDoesNotExistException.__name__ = "capsule.ProviderDoesNotExistException";
Object.assign(capsule_ProviderDoesNotExistException.prototype, {
	__class__: capsule_ProviderDoesNotExistException
});
class comicbox_ComicboxConfig {
	constructor(extensionUri,showSaveDialog) {
		this.showSaveDialog = true;
		this.extensionUri = extensionUri;
		if(showSaveDialog != null) {
			this.showSaveDialog = showSaveDialog;
		}
	}
}
comicbox_ComicboxConfig.__name__ = "comicbox.ComicboxConfig";
Object.assign(comicbox_ComicboxConfig.prototype, {
	__class__: comicbox_ComicboxConfig
});
class comicbox_ComicboxModule {
	constructor(config) {
		this.config = config;
	}
	register(container) {
		container.addMapping(new capsule_Mapping("comicbox.ComicboxConfig")).toValue(this.config);
		let tmp = capsule_Provider.ProvideFactory(function(c) {
			return c.getMappingByIdentifier("comicbox.ComicboxConfig").getValue(c).extensionUri;
		});
		container.addMapping(new capsule_Mapping("vscode.Uri" + "#" + "comicbox.uri")).toProvider(tmp).asShared();
		let tmp1 = capsule_Provider.ProvideFactory(function(c) {
			return new comicbox_boxup_VscodeReporter(c.getMappingByIdentifier("comicbox.diagnostic.DiagnosticManager").getValue(c));
		});
		container.addMapping(new capsule_Mapping("boxup.Reporter")).toProvider(tmp1).asShared();
		let tmp2 = capsule_Provider.ProvideFactory(function(c) {
			return new comicbox_generator_HtmlGenerator();
		});
		container.addMapping(new capsule_Mapping("comicbox.generator.HtmlGenerator")).toProvider(tmp2).asShared();
	}
}
comicbox_ComicboxModule.__name__ = "comicbox.ComicboxModule";
Object.assign(comicbox_ComicboxModule.prototype, {
	__class__: comicbox_ComicboxModule
});
class comicbox_Util {
	static getEditorByUri(uri) {
		return Lambda.find(Vscode.window.visibleTextEditors,function(editor) {
			return editor.document.uri.toString() == uri.toString();
		});
	}
	static isBoxupDocument(document) {
		return document.languageId == "box";
	}
}
comicbox_Util.__name__ = "comicbox.Util";
class comicbox_boxup_VscodeReporter {
	constructor(diagnostics) {
		this.diagnostics = diagnostics;
	}
	report(errors,source) {
		this.diagnostics.report(errors);
	}
}
comicbox_boxup_VscodeReporter.__name__ = "comicbox.boxup.VscodeReporter";
Object.assign(comicbox_boxup_VscodeReporter.prototype, {
	__class__: comicbox_boxup_VscodeReporter
});
class comicbox_core_PluginManager {
	constructor() {
		this.plugins = [];
	}
	add(plugin) {
		this.plugins.push(plugin);
	}
	register(context) {
		let _g = 0;
		let _g1 = this.plugins;
		while(_g < _g1.length) _g1[_g++].register(context);
	}
}
comicbox_core_PluginManager.__name__ = "comicbox.core.PluginManager";
Object.assign(comicbox_core_PluginManager.prototype, {
	__class__: comicbox_core_PluginManager
});
class comicbox_core_PluginModule {
	constructor() {
	}
	register(container) {
		let tmp = capsule_Provider.ProvideFactory(function(c) {
			return new comicbox_core_PluginManager();
		});
		container.addMapping(new capsule_Mapping("comicbox.core.PluginManager")).toProvider(tmp).asShared();
	}
}
comicbox_core_PluginModule.__name__ = "comicbox.core.PluginModule";
Object.assign(comicbox_core_PluginModule.prototype, {
	__class__: comicbox_core_PluginModule
});
class comicbox_definition_ComicboxValidator {
	constructor(manager) {
		this.manager = manager;
	}
	validate(nodes) {
		let _g = this.manager.getDefinitionFromNodes(nodes);
		switch(_g._hx_index) {
		case 0:
			return _g.v.validate(nodes);
		case 1:
			return boxup_Outcome.Ok(nodes);
		}
	}
}
comicbox_definition_ComicboxValidator.__name__ = "comicbox.definition.ComicboxValidator";
Object.assign(comicbox_definition_ComicboxValidator.prototype, {
	__class__: comicbox_definition_ComicboxValidator
});
class comicbox_definition_DefinitionModule {
	constructor() {
	}
	register(container) {
		let tmp = capsule_Provider.ProvideFactory(function(c) {
			return new comicbox_definition_DefintionManager(c.getMappingByIdentifier("boxup.Reporter").getValue(c));
		});
		container.addMapping(new capsule_Mapping("comicbox.definition.DefintionManager")).toProvider(tmp).asShared();
		let tmp1 = capsule_Provider.ProvideFactory(function(c) {
			return new comicbox_definition_ComicboxValidator(c.getMappingByIdentifier("comicbox.definition.DefintionManager").getValue(c));
		});
		container.addMapping(new capsule_Mapping("comicbox.definition.ComicboxValidator")).toProvider(tmp1).asShared();
	}
}
comicbox_definition_DefinitionModule.__name__ = "comicbox.definition.DefinitionModule";
Object.assign(comicbox_definition_DefinitionModule.prototype, {
	__class__: comicbox_definition_DefinitionModule
});
class comicbox_definition_DefintionManager {
	constructor(reporter) {
		this.definitions = new haxe_ds_StringMap();
		this.reporter = reporter;
		let loader = new boxup_cli_DefinitionCompiler(new boxup_cli_ResourceLoader(),reporter);
		let _g = loader.load("comic");
		switch(_g._hx_index) {
		case 0:
			this.definitions.h["comic"] = _g.v;
			break;
		case 1:
			throw new haxe_Exception("Could not load comic definition");
		}
		let _g1 = loader.load("note");
		switch(_g1._hx_index) {
		case 0:
			this.definitions.h["note"] = _g1.v;
			break;
		case 1:
			throw new haxe_Exception("Could not load note definition");
		}
	}
	getDefinition(name) {
		return this.definitions.h[name];
	}
	getDefinitionFromNodes(nodes) {
		if(nodes.length == 0) {
			return haxe_ds_Option.None;
		}
		let _g = nodes[0].type;
		if(_g._hx_index == 0) {
			switch(_g.name) {
			case "@root":
				return this.getDefinitionFromNodes(nodes[0].children);
			case "Comic":
				return haxe_ds_Option.Some(this.getDefinition("comic"));
			case "Note":
				return haxe_ds_Option.Some(this.getDefinition("note"));
			default:
				return haxe_ds_Option.None;
			}
		} else {
			return haxe_ds_Option.None;
		}
	}
}
comicbox_definition_DefintionManager.__name__ = "comicbox.definition.DefintionManager";
Object.assign(comicbox_definition_DefintionManager.prototype, {
	__class__: comicbox_definition_DefintionManager
});
class comicbox_diagnostic_DiagnosticManager {
	constructor() {
		this.collection = Vscode.languages.createDiagnosticCollection("boxup");
	}
	register(context) {
		let _gthis = this;
		context.subscriptions.push(this.collection);
		Vscode.workspace.onDidChangeTextDocument(function(change) {
			if(comicbox_Util.isBoxupDocument(change.document)) {
				_gthis.clear(change.document.uri);
			}
		});
		Vscode.workspace.onDidCloseTextDocument(function(document) {
			if(comicbox_Util.isBoxupDocument(document)) {
				_gthis.remove(document.uri);
			}
		});
	}
	clear(uri) {
		this.collection.set(uri,[]);
	}
	remove(uri) {
		this.collection.delete(uri);
	}
	report(errors) {
		this.collection.clear();
		let diags_h = Object.create(null);
		let _g = 0;
		let _g1 = errors;
		while(_g < _g1.length) {
			let error = _g1[_g];
			++_g;
			if(error.pos.file.startsWith("<")) {
				Vscode.window.showErrorMessage(error.toString());
				return;
			}
			let uri = vscode_Uri.parse(error.pos.file);
			let path = uri.toString();
			let editor = comicbox_Util.getEditorByUri(uri);
			if(editor == null) {
				return;
			}
			let source = editor.document.getText();
			let pos = error.pos;
			let startLine = 0;
			let endLine = 0;
			let charPos = 0;
			let startChar = 0;
			let endChar = 0;
			while(charPos <= pos.min) {
				++charPos;
				++startChar;
				if(source.charAt(charPos) == "\n") {
					++startLine;
					startChar = -2;
				}
			}
			endLine = startLine;
			endChar = startChar;
			while(charPos <= pos.max) {
				++charPos;
				++endChar;
				if(source.charAt(charPos) == "\n") {
					++endLine;
					endChar = 0;
				}
			}
			let diag = new vscode_Diagnostic(new vscode_Range(startLine,startChar,endLine,endChar),error.message,vscode_DiagnosticSeverity.Error);
			if(!Object.prototype.hasOwnProperty.call(diags_h,path)) {
				diags_h[path] = [];
			}
			diags_h[path].push(diag);
		}
		let _g2_keys = Object.keys(diags_h);
		let _g2_length = _g2_keys.length;
		let _g2_current = 0;
		while(_g2_current < _g2_length) {
			let key = _g2_keys[_g2_current++];
			let _g3_value = diags_h[key];
			this.collection.set(vscode_Uri.parse(key),_g3_value);
		}
	}
}
comicbox_diagnostic_DiagnosticManager.__name__ = "comicbox.diagnostic.DiagnosticManager";
Object.assign(comicbox_diagnostic_DiagnosticManager.prototype, {
	__class__: comicbox_diagnostic_DiagnosticManager
});
class comicbox_diagnostic_DiagnosticModule {
	constructor() {
	}
	register(container) {
		let tmp = capsule_Provider.ProvideFactory(function(c) {
			return new comicbox_diagnostic_DiagnosticManager();
		});
		container.addMapping(new capsule_Mapping("comicbox.diagnostic.DiagnosticManager")).toProvider(tmp).asShared();
		container.getMappingByIdentifier("comicbox.core.PluginManager").extend(function(manager) {
			manager.add(container.getMappingByIdentifier("comicbox.diagnostic.DiagnosticManager").getValue(container));
			return manager;
		});
	}
}
comicbox_diagnostic_DiagnosticModule.__name__ = "comicbox.diagnostic.DiagnosticModule";
Object.assign(comicbox_diagnostic_DiagnosticModule.prototype, {
	__class__: comicbox_diagnostic_DiagnosticModule
});
class comicbox_document_DocumentManager {
	constructor(reporter,definitions) {
		this.events = new vscode_EventEmitter();
		this.parsedDocuments = new haxe_ds_StringMap();
		this.reporter = reporter;
		this.definitions = definitions;
	}
	register(context) {
		let _gthis = this;
		Vscode.workspace.onDidChangeTextDocument(function(change) {
			if(comicbox_Util.isBoxupDocument(change.document)) {
				_gthis.parseDocument(change.document);
			}
		});
		Vscode.workspace.onDidCloseTextDocument(function(document) {
			if(comicbox_Util.isBoxupDocument(document)) {
				_gthis.removeDocument(document.uri.toString());
			}
		});
		Vscode.window.onDidChangeActiveTextEditor(function(change) {
			if(comicbox_Util.isBoxupDocument(change.document)) {
				_gthis.parseDocument(change.document);
			}
		});
	}
	getDocument(uri) {
		return this.parsedDocuments.h[uri];
	}
	removeDocument(uri) {
		let _this = this.parsedDocuments;
		if(Object.prototype.hasOwnProperty.call(_this.h,uri)) {
			delete(_this.h[uri]);
		}
	}
	parseDocument(document) {
		let _gthis = this;
		let source = new boxup_Source(document.uri.toString(),document.getText());
		console.log("src/comicbox/document/DocumentManager.hx:59:",source);
		let result = boxup_OutcomeTools.map(boxup_OutcomeTools.map(boxup_OutcomeTools.map(source.tokens,function(tokens) {
			return new boxup_Parser(tokens).parse();
		}),function(nodes) {
			let _g = _gthis.definitions.getDefinitionFromNodes(nodes);
			switch(_g._hx_index) {
			case 0:
				return _g.v.validate(nodes);
			case 1:
				return boxup_Outcome.Ok(nodes);
			}
		}),function(nodes) {
			let this1 = _gthis.parsedDocuments;
			let key = document.uri.toString();
			this1.h[key] = nodes;
			return boxup_Outcome.Ok(nodes);
		});
		switch(result._hx_index) {
		case 0:
			this.events.fire({ doc : document, nodes : result.data});
			break;
		case 1:
			this.reporter.report(result.error,source);
			break;
		}
	}
}
comicbox_document_DocumentManager.__name__ = "comicbox.document.DocumentManager";
Object.assign(comicbox_document_DocumentManager.prototype, {
	__class__: comicbox_document_DocumentManager
});
class comicbox_document_DocumentModule {
	constructor() {
	}
	register(container) {
		let tmp = capsule_Provider.ProvideFactory(function(c) {
			return new comicbox_document_DocumentManager(c.getMappingByIdentifier("boxup.Reporter").getValue(c),c.getMappingByIdentifier("comicbox.definition.DefintionManager").getValue(c));
		});
		container.addMapping(new capsule_Mapping("comicbox.document.DocumentManager")).toProvider(tmp).asShared();
		container.getMappingByIdentifier("comicbox.core.PluginManager").extend(function(manager) {
			manager.add(container.getMappingByIdentifier("comicbox.document.DocumentManager").getValue(container));
			return manager;
		});
	}
}
comicbox_document_DocumentModule.__name__ = "comicbox.document.DocumentModule";
Object.assign(comicbox_document_DocumentModule.prototype, {
	__class__: comicbox_document_DocumentModule
});
class comicbox_generator_HtmlGenerator {
	constructor() {
		this.panelCount = 0;
		this.pageCount = 0;
	}
	generate(nodes) {
		this.panelCount = 0;
		this.pageCount = 0;
		return boxup_Outcome.Ok(this.generateNodes(nodes).join(""));
	}
	generateNodes(nodes,wrapParagraph) {
		if(wrapParagraph == null) {
			wrapParagraph = true;
		}
		let result = new Array(nodes.length);
		let _g = 0;
		let _g1 = nodes.length;
		while(_g < _g1) {
			let i = _g++;
			result[i] = this.generateNode(nodes[i],wrapParagraph);
		}
		return result;
	}
	generateNode(node,wrapParagraph) {
		if(wrapParagraph == null) {
			wrapParagraph = true;
		}
		let _g = node.type;
		switch(_g._hx_index) {
		case 0:
			let _g1 = _g.name;
			switch(_g1) {
			case "Comic":
				let _g2 = new haxe_ds_StringMap();
				_g2.h["class"] = "comic-header";
				return this.el("header",_g2,[this.el("h1",new haxe_ds_StringMap(),[node.getProperty("title")]),this.el("h2",new haxe_ds_StringMap(),["Author: " + node.getProperty("author")])]);
			case "Dialog":
				let _g3 = new haxe_ds_StringMap();
				_g3.h["class"] = "dialog";
				let _g4 = new haxe_ds_StringMap();
				_g4.h["class"] = "dialog-character";
				return this.el("div",_g3,[this.el("header",_g4,[this.el("h4",new haxe_ds_StringMap(),[node.getProperty("character")])])].concat(this.generateNodes(node.children)));
			case "Item":
				return this.el("li",new haxe_ds_StringMap(),this.generateNodes(node.children,wrapParagraph));
			case "Page":
				this.pageCount++;
				this.panelCount = 0;
				let _g5 = new haxe_ds_StringMap();
				_g5.h["class"] = "page";
				return this.el("section",_g5,this.generateNodes(node.children));
			case "Panel":
				this.panelCount++;
				let _g6 = new haxe_ds_StringMap();
				_g6.h["class"] = "panel";
				let _g7 = new haxe_ds_StringMap();
				_g7.h["class"] = "panel-header";
				return this.el("div",_g6,[this.el("header",_g7,[this.el("h3",new haxe_ds_StringMap(),["Panel " + this.pageCount + "." + this.panelCount])].concat(this.generateNodes(node.children)))]);
			default:
				let _g8 = new haxe_ds_StringMap();
				_g8.h["class"] = _g1.toLowerCase();
				return this.el("div",_g8,this.generateNodes(node.children,wrapParagraph));
			}
			break;
		case 1:
			let _this = node.children;
			let result = new Array(_this.length);
			let _g9 = 0;
			let _g11 = _this.length;
			while(_g9 < _g11) {
				let i = _g9++;
				result[i] = this.generateNode(_this[i],false);
			}
			return result.join("");
		case 2:
			return StringTools.htmlEscape(node.textContent);
		}
	}
	el(tag,props,children) {
		let out = "<" + tag;
		let _g = [];
		let h = props.h;
		let _g1_keys = Object.keys(h);
		let _g1_length = _g1_keys.length;
		let _g1_current = 0;
		while(_g1_current < _g1_length) {
			let key = _g1_keys[_g1_current++];
			let _g2_value = h[key];
			if(_g2_value != null) {
				_g.push("" + key + "=\"" + _g2_value + "\"");
			} else {
				_g.push(null);
			}
		}
		let _g1 = [];
		let _g11 = 0;
		while(_g11 < _g.length) {
			let v = _g[_g11];
			++_g11;
			if(v != null) {
				_g1.push(v);
			}
		}
		if(_g1.length > 0) {
			out += " " + _g1.join(" ");
		}
		if(children != null) {
			return out + ">" + children.join("") + ("</" + tag + ">");
		} else {
			return out + "/>";
		}
	}
}
comicbox_generator_HtmlGenerator.__name__ = "comicbox.generator.HtmlGenerator";
Object.assign(comicbox_generator_HtmlGenerator.prototype, {
	__class__: comicbox_generator_HtmlGenerator
});
class comicbox_generator_PdfGenerator {
	constructor() {
		this.panelCount = 0;
		this.pageCount = 0;
	}
	generate(nodes) {
		this.panelCount = 0;
		this.pageCount = 0;
		let doc = new PDFDocument({ compress : false, size : "LETTER", margins : { top : 30, left : 20, bottom : 30, right : 20}});
		let buffer = new comicbox_generator_PdfGeneratorStream();
		let root = haxe_io_Path.directory(__filename);
		doc.registerFont("Default",haxe_io_Path.join([root,"assets","fonts","CourierPrime-Regular.ttf"]));
		doc.registerFont("Bold",haxe_io_Path.join([root,"assets","fonts","CourierPrime-Bold.ttf"]));
		doc.registerFont("Italic",haxe_io_Path.join([root,"assets","fonts","CourierPrime-Italic.ttf"]));
		doc.pipe(buffer);
		this.generateNodes(nodes,doc,{ });
		doc.end();
		return boxup_Outcome.Ok(buffer);
	}
	generateNodes(nodes,doc,style) {
		let _g = 0;
		while(_g < nodes.length) this.generateNode(nodes[_g++],doc,style);
	}
	generateNode(node,doc,style) {
		let _g = node.type;
		switch(_g._hx_index) {
		case 0:
			switch(_g.name) {
			case "@bold":case "@italic":case "@underlined":
				this.generateNodes(node.children,doc,style);
				break;
			case "Attached":
				doc.text("(attached) ",style);
				this.generateNodes(node.children,doc,style);
				break;
			case "Comic":
				doc.info.title = node.getProperty("title");
				doc.info.author = node.getProperty("author");
				doc.font("Bold",null,20).text(node.getProperty("title"),{ align : "center"}).moveDown(4).font("Bold",null,12).text("Author: " + node.getProperty("author"),{ align : "center"});
				break;
			case "Dialog":
				doc.moveDown().text(node.getProperty("character").toUpperCase(),{ align : "center"});
				this.generateNodes(node.children,doc,{ align : "center"});
				break;
			case "Page":
				this.pageCount++;
				this.panelCount = 0;
				doc.addPage().font("Bold",null,12).text("PAGE " + this.pageCount).moveDown(2);
				this.generateNodes(node.children,doc,{ });
				break;
			case "Panel":
				this.panelCount++;
				doc.font("Bold",null,12).text(("Panel " + this.pageCount + "." + this.panelCount).toUpperCase()).moveDown();
				this.generateNodes(node.children,doc,{ });
				doc.moveDown();
				break;
			case "Sfx":
				doc.moveDown().text("SFX (" + node.getProperty("note","sound") + ")",{ align : "center"});
				this.generateNodes(node.children,doc,{ align : "center"});
				break;
			default:
			}
			break;
		case 1:
			let text = [];
			let _g1 = 0;
			let _g2 = node.children;
			while(_g1 < _g2.length) {
				let child = _g2[_g1];
				++_g1;
				let _g = child.type;
				switch(_g._hx_index) {
				case 0:
					switch(_g.name) {
					case "@bold":case "@italic":case "@underlined":
						let _g3 = 0;
						let _g4 = child.children;
						while(_g3 < _g4.length) {
							let c = _g4[_g3];
							++_g3;
							if(c.type._hx_index == 2) {
								text.push(c.textContent);
							}
						}
						break;
					default:
					}
					break;
				case 2:
					text.push(child.textContent);
					break;
				default:
				}
			}
			doc.font("Default",null,12).text(text.join(""),style);
			doc.moveDown();
			break;
		case 2:
			doc.text(node.textContent,style);
			break;
		}
	}
}
comicbox_generator_PdfGenerator.__name__ = "comicbox.generator.PdfGenerator";
Object.assign(comicbox_generator_PdfGenerator.prototype, {
	__class__: comicbox_generator_PdfGenerator
});
var js_node_stream_Writable = require("stream").Writable;
class comicbox_generator_PdfGeneratorStream extends js_node_stream_Writable {
	constructor() {
		super(js_node_stream_WritableNewOptionsAdapter.from({ }));
		this.chunks = [];
	}
	_write(chunk,encoding,callback) {
		this.chunks.push(chunk);
		callback(null);
	}
	onComplete(cb) {
		let _gthis = this;
		let handle = function() {
			cb(_gthis.chunks);
		};
		if(this.writableFinished) {
			handle();
		} else {
			this.once("finish",handle);
		}
	}
}
comicbox_generator_PdfGeneratorStream.__name__ = "comicbox.generator.PdfGeneratorStream";
Object.assign(comicbox_generator_PdfGeneratorStream.prototype, {
	__class__: comicbox_generator_PdfGeneratorStream
});
class comicbox_preview_PreviewManager {
	constructor(extensionUri,generator,documents) {
		this.previews = [];
		let _gthis = this;
		this.extensionUri = extensionUri;
		this.generator = generator;
		this.documents = documents;
		this.documents.events.event(function(data) {
			_gthis.updatePreviewForDocument(data.doc,data.nodes);
		});
	}
	register(context) {
		let _gthis = this;
		context.subscriptions.push(Vscode.commands.registerCommand("comicbox.showPreview",function() {
			_gthis.createPreview(Vscode.window.activeTextEditor.document);
		}));
		Vscode.window.registerWebviewPanelSerializer("comicbox-preview",new comicbox_preview_PreviewSerializer(this));
	}
	addPreview(preview) {
		this.previews.push(preview);
	}
	updatePreviewForDocument(document,nodes) {
		let preview = this.getPreviewForDocument(document);
		if(preview == null) {
			return;
		}
		this.updatePreview(preview,nodes);
	}
	updatePreview(preview,nodes) {
		let _g = this.generator.generate(nodes);
		switch(_g._hx_index) {
		case 0:
			preview.updateHtml(_g.data);
			break;
		case 1:
			let tmp = Vscode.window;
			let _g1 = [];
			let _g2 = 0;
			let _g3 = _g.error;
			while(_g2 < _g3.length) _g1.push(_g3[_g2++].message);
			tmp.showErrorMessage("Could not generate a preview: " + _g1.join("\n"));
			break;
		}
	}
	getPreviewForDocument(document) {
		let path = document.uri.toString();
		return Lambda.find(this.previews,function(p) {
			return p.documentUri.toString() == path;
		});
	}
	createPreview(document) {
		if(!comicbox_Util.isBoxupDocument(document)) {
			Vscode.window.showErrorMessage("Only boxup documents can use the preview");
			return;
		}
		let preview = this.getPreviewForDocument(document);
		if(preview == null) {
			let panel = Vscode.window.createWebviewPanel("comicbox-preview","Comicbox Preview",vscode_ViewColumn.Three,{ enableScripts : true, retainContextWhenHidden : false});
			preview = new comicbox_preview_PreviewPanel(document.uri,this,panel);
			this.addPreview(preview);
		}
		let nodes = this.documents.getDocument(document.uri.toString());
		if(nodes != null) {
			this.updatePreview(preview,nodes);
		}
	}
}
comicbox_preview_PreviewManager.__name__ = "comicbox.preview.PreviewManager";
Object.assign(comicbox_preview_PreviewManager.prototype, {
	__class__: comicbox_preview_PreviewManager
});
class comicbox_preview_PreviewModule {
	constructor() {
	}
	register(container) {
		let tmp = capsule_Provider.ProvideFactory(function(c) {
			return new comicbox_preview_PreviewManager(c.getMappingByIdentifier("vscode.Uri" + "#" + "comicbox.uri").getValue(c),c.getMappingByIdentifier("comicbox.generator.HtmlGenerator").getValue(c),c.getMappingByIdentifier("comicbox.document.DocumentManager").getValue(c));
		});
		container.addMapping(new capsule_Mapping("comicbox.preview.PreviewManager")).toProvider(tmp).asShared();
		container.getMappingByIdentifier("comicbox.core.PluginManager").extend(function(manager) {
			manager.add(container.getMappingByIdentifier("comicbox.preview.PreviewManager").getValue(container));
			return manager;
		});
	}
}
comicbox_preview_PreviewModule.__name__ = "comicbox.preview.PreviewModule";
Object.assign(comicbox_preview_PreviewModule.prototype, {
	__class__: comicbox_preview_PreviewModule
});
class comicbox_preview_PreviewPanel {
	constructor(docuemntUri,manager,panel) {
		this.disposables = [];
		let _gthis = this;
		this.documentUri = docuemntUri;
		this.manager = manager;
		this.panel = panel;
		this.init();
		panel.onDidDispose(function(_) {
			_gthis.dispose();
		},null,this.disposables);
		panel.webview.onDidReceiveMessage(function(message) {
			_gthis.handleMessages(message);
		},null,this.disposables);
	}
	updateHtml(content) {
		this.panel.webview.postMessage({ command : "updateHtml", content : content});
	}
	updateState(state) {
		this.panel.webview.postMessage({ command : "upsateState", state : state});
	}
	init() {
		this.panel.title = "Comicbox Preview";
		this.panel.webview.html = this.render();
		this.updateState({ uri : this.documentUri.toString()});
	}
	dispose() {
		HxOverrides.remove(this.manager.previews,this);
		this.panel.dispose();
		while(this.disposables.length > 0) this.disposables.pop().dispose();
	}
	render() {
		let scriptSrc = vscode_Uri.joinPath(this.manager.extensionUri,"dist","assets","preview.js");
		return "\r\n      <!doctype html>\r\n\t\t\t<html lang=\"en\">\r\n        <head>\r\n          <meta charset=\"UTF-8\">\r\n          <title>Comicbox Preview</title>\r\n          <style>\r\n            a {\r\n              color: inherit;\r\n            }\r\n            a:hover {\r\n              color: inherit;\r\n            }\r\n            h1, h2, h3, h4 {\r\n              font-weight: normal;\r\n              margin: 10px 0;\r\n              text-transform: uppercase;\r\n            }\r\n            h2, h3, h4 {\r\n              font-size: inherit;\r\n            }\r\n            .comic {\r\n              margin-bottom: 20px;\r\n            }\r\n            .notes {\r\n              font-style: italic;\r\n              padding: 5px 20px;\r\n              background: #f7f7f7;\r\n              color: #8a8a8a;\r\n              margin-bottom: 40px;\r\n            }\r\n            .page {\r\n              padding-left: 10px;\r\n              padding-top: 10px;\r\n              border-top: 1px solid;\r\n              margin-bottom: 40px;\r\n            }\r\n            .page h2 {\r\n              color: #cccccc;\r\n            }\r\n            .panel {\r\n              margin-bottom: 40px;\r\n            }\r\n            .panel .attached:before {\r\n              content: \"(attached)\";\r\n              color: #8a8a8a;\r\n            }\r\n            .panel .mood {\r\n              color: #8a8a8a;\r\n            }\r\n            .dialog {\r\n              text-align: center;\r\n              margin-bottom: 20px;\r\n            }\r\n          </style>\r\n        </head>\r\n        <body>\r\n          <div id=\"target\"></div>\r\n          <script src=\"" + Std.string(this.panel.webview.asWebviewUri(scriptSrc)) + "\"></script>\r\n        </body>\r\n      </html>\r\n    ";
	}
	handleMessages(message) {
	}
}
comicbox_preview_PreviewPanel.__name__ = "comicbox.preview.PreviewPanel";
Object.assign(comicbox_preview_PreviewPanel.prototype, {
	__class__: comicbox_preview_PreviewPanel
});
class comicbox_preview_PreviewSerializer {
	constructor(manager) {
		this.manager = manager;
	}
	deserializeWebviewPanel(webviewPanel,state) {
		let preview = new comicbox_preview_PreviewPanel(vscode_Uri.parse(state.uri),this.manager,webviewPanel);
		this.manager.addPreview(preview);
		return Promise.resolve();
	}
}
comicbox_preview_PreviewSerializer.__name__ = "comicbox.preview.PreviewSerializer";
Object.assign(comicbox_preview_PreviewSerializer.prototype, {
	__class__: comicbox_preview_PreviewSerializer
});
class comicbox_render_FileWriter {
	constructor(config) {
		this.config = config;
	}
}
comicbox_render_FileWriter.__name__ = "comicbox.render.FileWriter";
Object.assign(comicbox_render_FileWriter.prototype, {
	__class__: comicbox_render_FileWriter
});
class comicbox_render_RenderCompiler extends boxup_Compiler {
	constructor(validator) {
		super(new boxup_cli_DefaultReporter(),new comicbox_generator_PdfGenerator(),validator);
	}
}
comicbox_render_RenderCompiler.__name__ = "comicbox.render.RenderCompiler";
Object.assign(comicbox_render_RenderCompiler.prototype, {
	__class__: comicbox_render_RenderCompiler
});
class comicbox_render_RenderManager {
	constructor(config,writer,compiler) {
		this.config = config;
		this.writer = writer;
		this.compiler = compiler;
	}
	register(context) {
		let _gthis = this;
		context.subscriptions.push(Vscode.commands.registerCommand("comicbox.compile",function() {
			_gthis.compileDocument(Vscode.window.activeTextEditor.document);
		}));
	}
	compileDocument(document) {
		let _gthis = this;
		if(!comicbox_Util.isBoxupDocument(document)) {
			Vscode.window.showErrorMessage("Not a vaid boxup document");
			return;
		}
		let source = new boxup_Source(document.uri.toString(),document.getText());
		this.createUri(source.filename).then(function(uri) {
			let _g = _gthis.compiler.compile(source);
			switch(_g._hx_index) {
			case 0:
				_g.v.onComplete(function(chunks) {
					let fsStream = js_node_Fs.createWriteStream(uri.fsPath,{ encoding : "binary"});
					fsStream.on("finish",function() {
						return Vscode.window.showInformationMessage("Exported PDF successfully!");
					});
					fsStream.on("error",function(err) {
						Vscode.window.showErrorMessage(err.message);
						console.log("src/comicbox/render/RenderManager.hx:67:",err);
					});
					fsStream.on("open",function() {
						let _g = 0;
						while(_g < chunks.length) fsStream.write(chunks[_g++],"base64");
						fsStream.end();
					});
				});
				break;
			case 1:
				break;
			}
		});
	}
	createUri(sourcePath) {
		let uri = vscode_Uri.file(haxe_io_Path.withExtension(haxe_io_Path.withoutExtension(sourcePath),"pdf"));
		if(this.config.showSaveDialog) {
			return Vscode.window.showSaveDialog({ filters : { "PDF file" : ["pdf"]}, defaultUri : uri});
		} else {
			return Promise.resolve(uri);
		}
	}
}
comicbox_render_RenderManager.__name__ = "comicbox.render.RenderManager";
Object.assign(comicbox_render_RenderManager.prototype, {
	__class__: comicbox_render_RenderManager
});
class comicbox_render_RenderModule {
	constructor() {
	}
	register(container) {
		let tmp = capsule_Provider.ProvideFactory(function(c) {
			return new comicbox_render_RenderCompiler(c.getMappingByIdentifier("comicbox.definition.ComicboxValidator").getValue(c));
		});
		container.addMapping(new capsule_Mapping("boxup.Compiler<comicbox.generator.PdfGeneratorStream>")).toProvider(tmp).asShared();
		let tmp1 = capsule_Provider.ProvideFactory(function(c) {
			return new comicbox_render_RenderManager(c.getMappingByIdentifier("comicbox.ComicboxConfig").getValue(c),c.getMappingByIdentifier("boxup.cli.Writer").getValue(c),c.getMappingByIdentifier("boxup.Compiler<comicbox.generator.PdfGeneratorStream>").getValue(c));
		});
		container.addMapping(new capsule_Mapping("comicbox.render.RenderManager")).toProvider(tmp1).asShared().with(function(c) {
			let tmp = capsule_Provider.ProvideFactory(function(c) {
				return new comicbox_render_FileWriter(c.getMappingByIdentifier("comicbox.ComicboxConfig").getValue(c));
			});
			c.addMapping(new capsule_Mapping("boxup.cli.Writer")).toProvider(tmp).asShared();
		});
		container.getMappingByIdentifier("comicbox.core.PluginManager").extend(function(manager) {
			manager.add(container.getMappingByIdentifier("comicbox.render.RenderManager").getValue(container));
			return manager;
		});
	}
}
comicbox_render_RenderModule.__name__ = "comicbox.render.RenderModule";
Object.assign(comicbox_render_RenderModule.prototype, {
	__class__: comicbox_render_RenderModule
});
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__:true,__constructs__:null
	,CFunction: {_hx_name:"CFunction",_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="Module",$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="FilePos",$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="Method",$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="LocalFunction",$_.__params__ = ["v"],$_)
};
haxe_StackItem.__constructs__ = [haxe_StackItem.CFunction,haxe_StackItem.Module,haxe_StackItem.FilePos,haxe_StackItem.Method,haxe_StackItem.LocalFunction];
class haxe_CallStack {
	static toString(stack) {
		let b = new StringBuf();
		let _g = 0;
		let _g1 = stack;
		while(_g < _g1.length) {
			let s = _g1[_g++];
			b.b += "\nCalled from ";
			haxe_CallStack.itemToString(b,s);
		}
		return b.b;
	}
	static subtract(this1,stack) {
		let startIndex = -1;
		let i = -1;
		while(++i < this1.length) {
			let _g = 0;
			let _g1 = stack.length;
			while(_g < _g1) if(haxe_CallStack.equalItems(this1[i],stack[_g++])) {
				if(startIndex < 0) {
					startIndex = i;
				}
				++i;
				if(i >= this1.length) {
					break;
				}
			} else {
				startIndex = -1;
			}
			if(startIndex >= 0) {
				break;
			}
		}
		if(startIndex >= 0) {
			return this1.slice(0,startIndex);
		} else {
			return this1;
		}
	}
	static equalItems(item1,item2) {
		if(item1 == null) {
			if(item2 == null) {
				return true;
			} else {
				return false;
			}
		} else {
			switch(item1._hx_index) {
			case 0:
				if(item2 == null) {
					return false;
				} else if(item2._hx_index == 0) {
					return true;
				} else {
					return false;
				}
				break;
			case 1:
				if(item2 == null) {
					return false;
				} else if(item2._hx_index == 1) {
					return item1.m == item2.m;
				} else {
					return false;
				}
				break;
			case 2:
				if(item2 == null) {
					return false;
				} else if(item2._hx_index == 2) {
					if(item1.file == item2.file && item1.line == item2.line && item1.column == item2.column) {
						return haxe_CallStack.equalItems(item1.s,item2.s);
					} else {
						return false;
					}
				} else {
					return false;
				}
				break;
			case 3:
				if(item2 == null) {
					return false;
				} else if(item2._hx_index == 3) {
					if(item1.classname == item2.classname) {
						return item1.method == item2.method;
					} else {
						return false;
					}
				} else {
					return false;
				}
				break;
			case 4:
				if(item2 == null) {
					return false;
				} else if(item2._hx_index == 4) {
					return item1.v == item2.v;
				} else {
					return false;
				}
				break;
			}
		}
	}
	static itemToString(b,s) {
		switch(s._hx_index) {
		case 0:
			b.b += "a C function";
			break;
		case 1:
			let _g = s.m;
			b.b = (b.b += "module ") + (_g == null ? "null" : "" + _g);
			break;
		case 2:
			let _g1 = s.s;
			let _g2 = s.file;
			let _g3 = s.line;
			let _g4 = s.column;
			if(_g1 != null) {
				haxe_CallStack.itemToString(b,_g1);
				b.b += " (";
			}
			b.b = (b.b += _g2 == null ? "null" : "" + _g2) + " line ";
			b.b += _g3 == null ? "null" : "" + _g3;
			if(_g4 != null) {
				b.b = (b.b += " column ") + (_g4 == null ? "null" : "" + _g4);
			}
			if(_g1 != null) {
				b.b += ")";
			}
			break;
		case 3:
			let _g5 = s.classname;
			let _g6 = s.method;
			b.b = (b.b += Std.string(_g5 == null ? "<unknown>" : _g5)) + ".";
			b.b += _g6 == null ? "null" : "" + _g6;
			break;
		case 4:
			let _g7 = s.v;
			b.b = (b.b += "local function #") + (_g7 == null ? "null" : "" + _g7);
			break;
		}
	}
}
class haxe_NativeStackTrace {
	static toHaxe(s,skip) {
		if(skip == null) {
			skip = 0;
		}
		if(s == null) {
			return [];
		} else if(typeof(s) == "string") {
			let stack = s.split("\n");
			if(stack[0] == "Error") {
				stack.shift();
			}
			let m = [];
			let _g = 0;
			let _g1 = stack.length;
			while(_g < _g1) {
				let i = _g++;
				if(skip > i) {
					continue;
				}
				let line = stack[i];
				let matched = line.match(/^    at ([A-Za-z0-9_. ]+) \(([^)]+):([0-9]+):([0-9]+)\)$/);
				if(matched != null) {
					let path = matched[1].split(".");
					if(path[0] == "$hxClasses") {
						path.shift();
					}
					let meth = path.pop();
					let file = matched[2];
					let line = Std.parseInt(matched[3]);
					let column = Std.parseInt(matched[4]);
					m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line,column));
				} else {
					m.push(haxe_StackItem.Module(StringTools.trim(line)));
				}
			}
			return m;
		} else if(skip > 0 && Array.isArray(s)) {
			return s.slice(skip);
		} else {
			return s;
		}
	}
	static normalize(stack,skipItems) {
		if(skipItems == null) {
			skipItems = 0;
		}
		if(Array.isArray(stack) && skipItems > 0) {
			return stack.slice(skipItems);
		} else if(typeof(stack) == "string") {
			switch(stack.substring(0,6)) {
			case "Error\n":case "Error:":
				++skipItems;
				break;
			default:
			}
			return haxe_NativeStackTrace.skipLines(stack,skipItems);
		} else {
			return stack;
		}
	}
	static skipLines(stack,skip,pos) {
		if(pos == null) {
			pos = 0;
		}
		while(true) if(skip > 0) {
			pos = stack.indexOf("\n",pos);
			if(pos < 0) {
				return "";
			} else {
				skip = --skip;
				pos += 1;
				continue;
			}
		} else {
			return stack.substring(pos);
		}
	}
}
haxe_NativeStackTrace.__name__ = "haxe.NativeStackTrace";
class haxe_Resource {
	static getString(name) {
		let _g = 0;
		let _g1 = haxe_Resource.content;
		while(_g < _g1.length) {
			let x = _g1[_g];
			++_g;
			if(x.name == name) {
				if(x.str != null) {
					return x.str;
				}
				return haxe_crypto_Base64.decode(x.data).toString();
			}
		}
		return null;
	}
}
haxe_Resource.__name__ = "haxe.Resource";
class haxe_ValueException extends haxe_Exception {
	constructor(value,previous,native) {
		super(String(value),previous,native);
		this.value = value;
		this.__skipStack++;
	}
	unwrap() {
		return this.value;
	}
}
haxe_ValueException.__name__ = "haxe.ValueException";
Object.assign(haxe_ValueException.prototype, {
	__class__: haxe_ValueException
});
class haxe_io_Bytes {
	constructor(data) {
		this.length = data.byteLength;
		this.b = new Uint8Array(data);
		this.b.bufferValue = data;
		data.hxBytes = this;
		data.bytes = this.b;
	}
	getString(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		let s = "";
		let b = this.b;
		let i = pos;
		let max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			while(i < max) {
				let c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					let code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					let code = (c & 31) << 12 | (b[i++] & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else {
					let u = (c & 15) << 18 | (b[i++] & 127) << 12 | (b[i++] & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				let c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	toString() {
		return this.getString(0,this.length);
	}
	static ofString(s,encoding) {
		if(encoding == haxe_io_Encoding.RawNative) {
			let buf = new Uint8Array(s.length << 1);
			let _g = 0;
			let _g1 = s.length;
			while(_g < _g1) {
				let i = _g++;
				let c = s.charCodeAt(i);
				buf[i << 1] = c & 255;
				buf[i << 1 | 1] = c >> 8;
			}
			return new haxe_io_Bytes(buf.buffer);
		}
		let a = [];
		let i = 0;
		while(i < s.length) {
			let c = s.charCodeAt(i++);
			if(55296 <= c && c <= 56319) {
				c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
			}
			if(c <= 127) {
				a.push(c);
			} else if(c <= 2047) {
				a.push(192 | c >> 6);
				a.push(128 | c & 63);
			} else if(c <= 65535) {
				a.push(224 | c >> 12);
				a.push(128 | c >> 6 & 63);
				a.push(128 | c & 63);
			} else {
				a.push(240 | c >> 18);
				a.push(128 | c >> 12 & 63);
				a.push(128 | c >> 6 & 63);
				a.push(128 | c & 63);
			}
		}
		return new haxe_io_Bytes(new Uint8Array(a).buffer);
	}
}
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
Object.assign(haxe_io_Bytes.prototype, {
	__class__: haxe_io_Bytes
});
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__:true,__constructs__:null
	,UTF8: {_hx_name:"UTF8",_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_name:"RawNative",_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
class haxe_crypto_Base64 {
	static decode(str,complement) {
		if(complement == null) {
			complement = true;
		}
		if(complement) {
			while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
		}
		return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
	}
}
haxe_crypto_Base64.__name__ = "haxe.crypto.Base64";
class haxe_crypto_BaseCode {
	constructor(base) {
		let len = base.length;
		let nbits = 1;
		while(len > 1 << nbits) ++nbits;
		if(nbits > 8 || len != 1 << nbits) {
			throw haxe_Exception.thrown("BaseCode : base length must be a power of two.");
		}
		this.base = base;
		this.nbits = nbits;
	}
	initTable() {
		let tbl = [];
		let _g = 0;
		while(_g < 256) tbl[_g++] = -1;
		let _g1 = 0;
		let _g2 = this.base.length;
		while(_g1 < _g2) {
			let i = _g1++;
			tbl[this.base.b[i]] = i;
		}
		this.tbl = tbl;
	}
	decodeBytes(b) {
		let nbits = this.nbits;
		if(this.tbl == null) {
			this.initTable();
		}
		let tbl = this.tbl;
		let size = b.length * nbits >> 3;
		let out = new haxe_io_Bytes(new ArrayBuffer(size));
		let buf = 0;
		let curbits = 0;
		let pin = 0;
		let pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				let i = tbl[b.b[pin++]];
				if(i == -1) {
					throw haxe_Exception.thrown("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255;
		}
		return out;
	}
}
haxe_crypto_BaseCode.__name__ = "haxe.crypto.BaseCode";
Object.assign(haxe_crypto_BaseCode.prototype, {
	__class__: haxe_crypto_BaseCode
});
var haxe_ds_Option = $hxEnums["haxe.ds.Option"] = { __ename__:true,__constructs__:null
	,Some: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Option",toString:$estr}; },$_._hx_name="Some",$_.__params__ = ["v"],$_)
	,None: {_hx_name:"None",_hx_index:1,__enum__:"haxe.ds.Option",toString:$estr}
};
haxe_ds_Option.__constructs__ = [haxe_ds_Option.Some,haxe_ds_Option.None];
class haxe_ds_StringMap {
	constructor() {
		this.h = Object.create(null);
	}
}
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
Object.assign(haxe_ds_StringMap.prototype, {
	__class__: haxe_ds_StringMap
});
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__:true,__constructs__:null
	,Blocked: {_hx_name:"Blocked",_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_name:"Overflow",_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_name:"OutsideBounds",_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["e"],$_)
};
haxe_io_Error.__constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds,haxe_io_Error.Custom];
class haxe_io_Path {
	constructor(path) {
		switch(path) {
		case ".":case "..":
			this.dir = path;
			this.file = "";
			return;
		}
		let c1 = path.lastIndexOf("/");
		let c2 = path.lastIndexOf("\\");
		if(c1 < c2) {
			this.dir = HxOverrides.substr(path,0,c2);
			path = HxOverrides.substr(path,c2 + 1,null);
			this.backslash = true;
		} else if(c2 < c1) {
			this.dir = HxOverrides.substr(path,0,c1);
			path = HxOverrides.substr(path,c1 + 1,null);
		} else {
			this.dir = null;
		}
		let cp = path.lastIndexOf(".");
		if(cp != -1) {
			this.ext = HxOverrides.substr(path,cp + 1,null);
			this.file = HxOverrides.substr(path,0,cp);
		} else {
			this.ext = null;
			this.file = path;
		}
	}
	toString() {
		return (this.dir == null ? "" : this.dir + (this.backslash ? "\\" : "/")) + this.file + (this.ext == null ? "" : "." + this.ext);
	}
	static withoutExtension(path) {
		let s = new haxe_io_Path(path);
		s.ext = null;
		return s.toString();
	}
	static directory(path) {
		let s = new haxe_io_Path(path);
		if(s.dir == null) {
			return "";
		}
		return s.dir;
	}
	static withExtension(path,ext) {
		let s = new haxe_io_Path(path);
		s.ext = ext;
		return s.toString();
	}
	static join(paths) {
		let _g = [];
		let _g1 = 0;
		while(_g1 < paths.length) {
			let v = paths[_g1];
			++_g1;
			if(v != null && v != "") {
				_g.push(v);
			}
		}
		if(_g.length == 0) {
			return "";
		}
		let path = _g[0];
		let _g2 = 1;
		let _g3 = _g.length;
		while(_g2 < _g3) {
			path = haxe_io_Path.addTrailingSlash(path);
			path += _g[_g2++];
		}
		return haxe_io_Path.normalize(path);
	}
	static normalize(path) {
		let slash = "/";
		path = path.split("\\").join(slash);
		if(path == slash) {
			return slash;
		}
		let target = [];
		let _g = 0;
		let _g1 = path.split(slash);
		while(_g < _g1.length) {
			let token = _g1[_g];
			++_g;
			if(token == ".." && target.length > 0 && target[target.length - 1] != "..") {
				target.pop();
			} else if(token == "") {
				if(target.length > 0 || HxOverrides.cca(path,0) == 47) {
					target.push(token);
				}
			} else if(token != ".") {
				target.push(token);
			}
		}
		let acc_b = "";
		let colon = false;
		let slashes = false;
		let _g2_offset = 0;
		let _g2_s = target.join(slash);
		while(_g2_offset < _g2_s.length) {
			let s = _g2_s;
			let index = _g2_offset++;
			let c = s.charCodeAt(index);
			if(c >= 55296 && c <= 56319) {
				c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
			}
			let c1 = c;
			if(c1 >= 65536) {
				++_g2_offset;
			}
			let c2 = c1;
			switch(c2) {
			case 47:
				if(!colon) {
					slashes = true;
				} else {
					let i = c2;
					colon = false;
					if(slashes) {
						acc_b += "/";
						slashes = false;
					}
					acc_b += String.fromCodePoint(i);
				}
				break;
			case 58:
				acc_b += ":";
				colon = true;
				break;
			default:
				let i = c2;
				colon = false;
				if(slashes) {
					acc_b += "/";
					slashes = false;
				}
				acc_b += String.fromCodePoint(i);
			}
		}
		return acc_b;
	}
	static addTrailingSlash(path) {
		if(path.length == 0) {
			return "/";
		}
		let c1 = path.lastIndexOf("/");
		let c2 = path.lastIndexOf("\\");
		if(c1 < c2) {
			if(c2 != path.length - 1) {
				return path + "\\";
			} else {
				return path;
			}
		} else if(c1 != path.length - 1) {
			return path + "/";
		} else {
			return path;
		}
	}
}
haxe_io_Path.__name__ = "haxe.io.Path";
Object.assign(haxe_io_Path.prototype, {
	__class__: haxe_io_Path
});
class haxe_iterators_ArrayIterator {
	constructor(array) {
		this.current = 0;
		this.array = array;
	}
	hasNext() {
		return this.current < this.array.length;
	}
	next() {
		return this.array[this.current++];
	}
}
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
Object.assign(haxe_iterators_ArrayIterator.prototype, {
	__class__: haxe_iterators_ArrayIterator
});
class js_Boot {
	static getClass(o) {
		if(o == null) {
			return null;
		} else if(((o) instanceof Array)) {
			return Array;
		} else {
			let cl = o.__class__;
			if(cl != null) {
				return cl;
			}
			let name = js_Boot.__nativeClassName(o);
			if(name != null) {
				return js_Boot.__resolveNativeClass(name);
			}
			return null;
		}
	}
	static __string_rec(o,s) {
		if(o == null) {
			return "null";
		}
		if(s.length >= 5) {
			return "<...>";
		}
		let t = typeof(o);
		if(t == "function" && (o.__name__ || o.__ename__)) {
			t = "object";
		}
		switch(t) {
		case "function":
			return "<function>";
		case "object":
			if(o.__enum__) {
				let e = $hxEnums[o.__enum__];
				let con = e.__constructs__[o._hx_index];
				let n = con._hx_name;
				if(con.__params__) {
					s = s + "\t";
					return n + "(" + ((function($this) {
						var $r;
						let _g = [];
						{
							let _g1 = 0;
							let _g2 = con.__params__;
							while(true) {
								if(!(_g1 < _g2.length)) {
									break;
								}
								let p = _g2[_g1];
								_g1 = _g1 + 1;
								_g.push(js_Boot.__string_rec(o[p],s));
							}
						}
						$r = _g;
						return $r;
					}(this))).join(",") + ")";
				} else {
					return n;
				}
			}
			if(((o) instanceof Array)) {
				let str = "[";
				s += "\t";
				let _g = 0;
				let _g1 = o.length;
				while(_g < _g1) {
					let i = _g++;
					str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
				}
				str += "]";
				return str;
			}
			let tostr;
			try {
				tostr = o.toString;
			} catch( _g ) {
				return "???";
			}
			if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
				let s2 = o.toString();
				if(s2 != "[object Object]") {
					return s2;
				}
			}
			let str = "{\n";
			s += "\t";
			let hasp = o.hasOwnProperty != null;
			let k = null;
			for( k in o ) {
			if(hasp && !o.hasOwnProperty(k)) {
				continue;
			}
			if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
				continue;
			}
			if(str.length != 2) {
				str += ", \n";
			}
			str += s + k + " : " + js_Boot.__string_rec(o[k],s);
			}
			s = s.substring(1);
			str += "\n" + s + "}";
			return str;
		case "string":
			return o;
		default:
			return String(o);
		}
	}
	static __nativeClassName(o) {
		let name = js_Boot.__toStr.call(o).slice(8,-1);
		if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
			return null;
		}
		return name;
	}
	static __resolveNativeClass(name) {
		return $global[name];
	}
}
js_Boot.__name__ = "js.Boot";
var js_node_Fs = require("fs");
class js_node_stream_WritableNewOptionsAdapter {
	static from(options) {
		if(!Object.prototype.hasOwnProperty.call(options,"final")) {
			Object.defineProperty(options,"final",{ get : function() {
				return options.final_;
			}});
		}
		return options;
	}
}
var PDFDocument = require("pdfkit");
var vscode_Diagnostic = require("vscode").Diagnostic;
var vscode_DiagnosticSeverity = require("vscode").DiagnosticSeverity;
var vscode_EventEmitter = require("vscode").EventEmitter;
var vscode_Range = require("vscode").Range;
var vscode_Uri = require("vscode").Uri;
var vscode_ViewColumn = require("vscode").ViewColumn;
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
{
	String.prototype.__class__ = String;
	String.__name__ = "String";
	Array.__name__ = "Array";
}
haxe_Resource.content = [{ name : "comic", data : "W1Jvb3RdDQogIFtDaGlsZCBuYW1lPUNvbWljIHJlcXVpcmVkPXRydWUgbXVsdGlwbGU9ZmFsc2VdDQogIFtDaGlsZCBuYW1lPUluZm9dDQogIFtDaGlsZCBuYW1lPVBhZ2VdDQogIFtDaGlsZCBuYW1lPVNjZW5lIHN5bWJvbD0nIyddDQoNCltCbG9jayBuYW1lPUNvbWljXQ0KICBbUHJvcGVydHkgbmFtZT10aXRsZSByZXF1aXJlZD10cnVlXQ0KICBbUHJvcGVydHkgbmFtZT1hdXRob3IgcmVxdWlyZWQ9dHJ1ZV0NCiAgW1Byb3BlcnR5IG5hbWU9dmVyc2lvbiB0eXBlPUludF0NCiAgW1Byb3BlcnR5IG5hbWU9ZGF0ZV0NCiAgW1Byb3BlcnR5IG5hbWU9Zmlyc3RQYWdlTnVtYmVyIHR5cGU9SW50XQ0KICBbRW51bVByb3BlcnR5IG5hbWU9c3RhdHVzIHJlcXVpcmVkPXRydWVdDQogICAgW09wdGlvbiB2YWx1ZT1QdWJsaXNoZWRdDQogICAgW09wdGlvbiB2YWx1ZT1EcmFmdF0NCg0KW0Jsb2NrIG5hbWU9SW5mb10NCiAgW1Byb3BlcnR5IG5hbWU9dGl0bGVdDQogIFtDaGlsZCBuYW1lPVBhcmFncmFwaF0NCiAgW0NoaWxkIG5hbWU9TGlzdF0NCg0KW0Jsb2NrIG5hbWU9UGFyYWdyYXBoIGtpbmQ9UGFyYWdyYXBoXQ0KICBbQ2hpbGQgbmFtZT1MaW5rXQ0KDQpbQmxvY2sgbmFtZT1TY2VuZV0NCiAgW0lkUHJvcGVydHkgbmFtZT10aXRsZSByZXF1aXJlZD10cnVlXQ0KDQpbQmxvY2sgbmFtZT1QYWdlXQ0KICBbQ2hpbGQgbmFtZT1JbmZvXQ0KICBbQ2hpbGQgbmFtZT1QYW5lbF0NCg0KW0Jsb2NrIG5hbWU9UGFuZWxdDQogIFtDaGlsZCBuYW1lPURpYWxvZyBzeW1ib2w9IkAiXQ0KICBbQ2hpbGQgbmFtZT1TZnggc3ltYm9sPSIhIl0NCiAgW0NoaWxkIG5hbWU9SW5mb10NCiAgW0NoaWxkIG5hbWU9UGFyYWdyYXBoXQ0KDQpbQmxvY2sgbmFtZT1EaWFsb2ddDQogIFtJZFByb3BlcnR5IG5hbWU9Y2hhcmFjdGVyIHJlcXVpcmVkPXRydWVdDQogIFtQcm9wZXJ0eSBuYW1lPW1vZGlmaWVyXQ0KICBbQ2hpbGQgbmFtZT1QYXJhZ3JhcGggcmVxdWlyZWQ9dHJ1ZV0NCiAgW0NoaWxkIG5hbWU9TW9vZF0NCiAgW0NoaWxkIG5hbWU9QXR0YWNoZWQgc3ltYm9sPSImIl0NCg0KW0Jsb2NrIG5hbWU9U2Z4XQ0KICBbSWRQcm9wZXJ0eSBuYW1lPW5vdGVdDQogIFtDaGlsZCBuYW1lPVBhcmFncmFwaF0NCg0KW0Jsb2NrIG5hbWU9TGluayBraW5kPVRhZ10NCiAgW1Byb3BlcnR5IG5hbWU9dXJsIHJlcXVpcmVkPXRydWVdDQoNCltCbG9jayBuYW1lPU1vb2Qga2luZD1UYWddDQogIFtDaGlsZCBuYW1lPVBhcmFncmFwaF0NCg0KW0Jsb2NrIG5hbWU9QXR0YWNoZWQga2luZD1UYWddDQogIFtDaGlsZCBuYW1lPVBhcmFncmFwaF0NCg0KW0Jsb2NrIG5hbWU9TGlzdF0NCiAgW0VudW1Qcm9wZXJ0eSBuYW1lPXR5cGVdDQogICAgW09wdGlvbiB2YWx1ZT1PcmRlcmVkXQ0KICAgIFtPcHRpb24gdmFsdWU9VW5vcmRlcmVkXQ0KICBbQ2hpbGQgbmFtZT1JdGVtIHN5bWJvbD0iLSIgcmVxdWlyZWQ9dHJ1ZV0NCg0KW0Jsb2NrIG5hbWU9SXRlbV0NCiAgW0NoaWxkIG5hbWU9UGFyYWdyYXBoXQ0K"},{ name : "note", data : "W1Jvb3RdDQogIFtDaGlsZCBuYW1lPU5vdGUgcmVxdWlyZWQ9dHJ1ZSBtdWx0aXBsZT1mYWxzZV0NCiAgW0NoaWxkIG5hbWU9U2VjdGlvbl0NCiAgW0NoaWxkIG5hbWU9SGVhZGVyXQ0KICBbQ2hpbGQgbmFtZT1QYXJhZ3JhcGhdDQogIFtDaGlsZCBuYW1lPUxpbmtdDQogIFtDaGlsZCBuYW1lPUxpc3RdDQoNCltCbG9jayBuYW1lPU5vdGVdDQogIFtQcm9wZXJ0eSBuYW1lPXRpdGxlIHJlcXVpcmVkPXRydWVdDQogIFtQcm9wZXJ0eSBuYW1lPXZlcnNpb25dDQoNCltCbG9jayBuYW1lPVBhcmFncmFwaCBraW5kPVBhcmFncmFwaF0NCiAgW0NoaWxkIG5hbWU9TGlua10NCiAgW0NoaWxkIG5hbWU9RGV0YWlsXQ0KDQpbQmxvY2sgbmFtZT1MaW5rIGtpbmQ9VGFnXQ0KICBbUHJvcGVydHkgbmFtZT11cmwgcmVxdWlyZWQ9dHJ1ZV0NCg0KW0Jsb2NrIG5hbWU9RGV0YWlsIGtpbmQ9VGFnXQ0KICBbQ2hpbGQgbmFtZT1QYXJhZ3JhcGhdDQoNCltCbG9jayBuYW1lPVNlY3Rpb25dDQogIFtQcm9wZXJ0eSBuYW1lPWlkXQ0KICBbUHJvcGVydHkgbmFtZT10aXRsZV0NCiAgW0NoaWxkIG5hbWU9SGVhZGVyXQ0KICBbQ2hpbGQgbmFtZT1QYXJhZ3JhcGhdDQogIFtDaGlsZCBuYW1lPUxpc3RdDQoNCltCbG9jayBuYW1lPUhlYWRlciBraW5kPVRhZ10NCiAgW0NoaWxkIG5hbWU9UGFyYWdyYXBoXQ0KDQpbQmxvY2sgbmFtZT1MaXN0XQ0KICBbRW51bVByb3BlcnR5IG5hbWU9dHlwZV0NCiAgICBbT3B0aW9uIHZhbHVlPU9yZGVyZWRdDQogICAgW09wdGlvbiB2YWx1ZT1Vbm9yZGVyZWRdDQogIFtDaGlsZCBuYW1lPUl0ZW0gc3ltYm9sPSItIiByZXF1aXJlZD10cnVlXQ0KDQpbQmxvY2sgbmFtZT1JdGVtXQ0KICBbQ2hpbGQgbmFtZT1QYXJhZ3JhcGhdDQo"}];
js_Boot.__toStr = ({ }).toString;
boxup_cli_DefinitionGenerator.defaultParagraphChildren = [new boxup_cli_ChildDefinition("@italic",null,null,null),new boxup_cli_ChildDefinition("@bold",null,null,null),new boxup_cli_ChildDefinition("@underlined",null,null,null),new boxup_cli_ChildDefinition("@raw",null,null,null)];
boxup_cli_DefinitionGenerator.defaultBlocks = [new boxup_cli_BlockDefinition("@italic",null,"Tag",[],[]),new boxup_cli_BlockDefinition("@bold",null,"Tag",[],[]),new boxup_cli_BlockDefinition("@underlined",null,"Tag",[],[]),new boxup_cli_BlockDefinition("@raw",null,"Tag",[],[])];
var boxup_cli_DefinitionValidator_validator = new boxup_cli_Definition([new boxup_cli_BlockDefinition("@root",null,null,[new boxup_cli_ChildDefinition("Root",null,true,false),new boxup_cli_ChildDefinition("Block",null,null,null)],[]),new boxup_cli_BlockDefinition("Root",null,null,[new boxup_cli_ChildDefinition("Child",null,null,null)],[]),new boxup_cli_BlockDefinition("Block",null,null,[new boxup_cli_ChildDefinition("Child",null,null,null),new boxup_cli_ChildDefinition("Property",null,null,null),new boxup_cli_ChildDefinition("IdProperty",null,null,false),new boxup_cli_ChildDefinition("EnumProperty",null,null,null),new boxup_cli_ChildDefinition("RenderHint",null,null,false)],[new boxup_cli_PropertyDefinition("kind",null,false,"String",["Tag","Normal","Paragraph"]),new boxup_cli_PropertyDefinition("name",true,true,"String",null)]),new boxup_cli_BlockDefinition("Property",null,null,[],[new boxup_cli_PropertyDefinition("name",true,true,"String",null),new boxup_cli_PropertyDefinition("type",null,false,"String",null),new boxup_cli_PropertyDefinition("required",null,false,"Bool",null),new boxup_cli_PropertyDefinition("type",null,false,"String",["String","Int","Float","Bool"])]),new boxup_cli_BlockDefinition("IdProperty",null,null,[],[new boxup_cli_PropertyDefinition("name",true,true,"String",null),new boxup_cli_PropertyDefinition("type",null,false,"String",null),new boxup_cli_PropertyDefinition("required",null,false,"Bool",null)]),new boxup_cli_BlockDefinition("EnumProperty",null,null,[new boxup_cli_ChildDefinition("Option",null,true,true)],[new boxup_cli_PropertyDefinition("name",true,true,"String",null),new boxup_cli_PropertyDefinition("type",null,false,"String",null),new boxup_cli_PropertyDefinition("required",null,false,"Bool",null)]),new boxup_cli_BlockDefinition("Option",null,null,[],[new boxup_cli_PropertyDefinition("value",null,true,"String",null)]),new boxup_cli_BlockDefinition("Child",null,null,[],[new boxup_cli_PropertyDefinition("name",true,true,"String",null),new boxup_cli_PropertyDefinition("required",null,false,"Bool",null),new boxup_cli_PropertyDefinition("multiple",null,false,"Bool",null),new boxup_cli_PropertyDefinition("symbol",null,null,"String",["!","@","#","%","$","&","^","-",":","<",">","?","+"])]),new boxup_cli_BlockDefinition("RenderHint",null,null,[],[new boxup_cli_PropertyDefinition("hint",true,true,null,["Header","SubHeader","Section","ListContainer","ListItem","Link","Image"])])]);
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
